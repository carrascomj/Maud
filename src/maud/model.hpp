
// Code generated by stanc v2.28.1
#include <stan/model/model_header.hpp>
namespace model_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 550> locations_array__ = 
{" (found before start of program)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 108, column 2 to column 27)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 109, column 2 to column 30)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 110, column 2 to column 24)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 111, column 2 to column 52)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 112, column 2 to column 24)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 113, column 2 to column 28)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 114, column 2 to column 28)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 115, column 2 to column 39)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 116, column 2 to column 29)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 117, column 2 to column 46)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 118, column 2 to column 57)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 119, column 2 to column 72)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 120, column 2 to column 65)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 124, column 2 to column 52)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 125, column 2 to column 52)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 126, column 2 to column 62)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 127, column 2 to column 64)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 128, column 2 to column 64)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 129, column 2 to column 97)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 130, column 2 to column 94)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 131, column 2 to column 55)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 132, column 2 to column 76)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 133, column 2 to column 103)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 134, column 2 to column 119)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 135, column 2 to column 114)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 137, column 2 to column 50)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 138, column 2 to column 46)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 139, column 2 to column 42)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 141, column 4 to column 108)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 142, column 4 to column 40)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 143, column 11 to column 19)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 143, column 4 to column 77)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 144, column 11 to column 36)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 144, column 4 to column 95)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 145, column 11 to column 29)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 145, column 4 to line 192, column 32)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 193, column 4 to column 48)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 194, column 4 to column 52)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 196, column 11 to column 17)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 196, column 4 to line 233, column 59)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 235, column 6 to column 51)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 234, column 4 to line 235, column 51)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 238, column 8 to column 52)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 239, column 8 to column 69)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 240, column 8 to column 30)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 241, column 8 to column 40)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 242, column 8 to column 55)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 243, column 8 to column 66)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 244, column 8 to column 26)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 245, column 8 to column 35)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 246, column 8 to column 30)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 247, column 8 to column 33)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 248, column 8 to column 26)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 249, column 8 to column 34)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 250, column 8 to column 34)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 251, column 8 to column 56)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 252, column 8 to column 40)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 253, column 8 to column 62)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 254, column 8 to column 28)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 237, column 140 to line 255, column 7)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 236, column 4 to line 255, column 7)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 195, column 4 to line 256, column 5)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 140, column 27 to line 257, column 3)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 140, column 2 to line 257, column 3)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 285, column 2 to column 39)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 286, column 2 to column 39)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 287, column 2 to column 42)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 288, column 2 to column 42)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 289, column 2 to column 55)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 290, column 2 to column 48)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 291, column 2 to column 47)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 292, column 2 to column 53)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 293, column 2 to column 51)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 294, column 2 to column 41)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 296, column 4 to column 97)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 297, column 4 to column 112)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 295, column 33 to line 298, column 3)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 295, column 2 to line 298, column 3)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 300, column 4 to column 91)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 301, column 4 to column 106)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 299, column 33 to line 302, column 3)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 299, column 2 to line 302, column 3)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 304, column 4 to column 106)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 305, column 4 to line 317, column 68)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 318, column 4 to line 324, column 46)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 325, column 4 to line 337, column 47)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 338, column 4 to line 344, column 55)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 346, column 4 to column 89)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 303, column 27 to line 347, column 3)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 303, column 2 to line 347, column 3)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 260, column 2 to column 28)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 261, column 2 to column 26)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 262, column 2 to column 26)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 263, column 2 to column 30)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 264, column 2 to column 30)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 265, column 2 to column 41)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 266, column 2 to column 65)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 267, column 2 to column 33)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 269, column 4 to column 45)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 270, column 4 to column 41)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 271, column 4 to column 39)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 272, column 4 to column 31)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 273, column 4 to column 29)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 268, column 28 to line 274, column 3)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 268, column 2 to line 274, column 3)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 277, column 6 to column 91)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 276, column 4 to line 277, column 91)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 279, column 6 to column 94)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 278, column 4 to line 279, column 94)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 281, column 6 to column 85)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 280, column 4 to line 281, column 85)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 275, column 22 to line 282, column 3)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 275, column 2 to line 282, column 3)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 4, column 2 to column 21)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 5, column 2 to column 26)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 6, column 2 to column 27)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 7, column 2 to column 28)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 8, column 2 to column 28)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 9, column 2 to column 20)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 10, column 2 to column 26)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 11, column 2 to column 24)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 12, column 2 to column 23)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 13, column 2 to column 22)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 14, column 2 to column 41)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 15, column 2 to column 28)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 16, column 2 to column 34)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 17, column 2 to column 36)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 18, column 2 to column 34)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 19, column 2 to column 20)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 20, column 2 to column 20)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 21, column 2 to column 20)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 22, column 2 to column 20)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 23, column 2 to column 20)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 24, column 2 to column 20)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 26, column 45 to column 57)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 26, column 2 to column 59)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 27, column 43 to column 61)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 27, column 2 to column 63)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 28, column 51 to column 69)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 28, column 2 to column 71)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 29, column 40 to column 58)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 29, column 2 to column 60)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 30, column 13 to column 31)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 30, column 2 to column 33)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 31, column 18 to column 36)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 31, column 2 to column 49)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 32, column 51 to column 69)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 32, column 2 to column 71)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 33, column 47 to column 65)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 33, column 2 to column 67)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 34, column 13 to column 31)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 34, column 2 to column 33)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 35, column 18 to column 36)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 35, column 2 to column 49)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 36, column 50 to column 70)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 36, column 2 to column 72)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 37, column 42 to column 62)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 37, column 2 to column 64)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 38, column 12 to column 32)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 38, column 2 to column 34)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 39, column 18 to column 38)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 39, column 2 to column 50)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 41, column 9 to column 21)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 41, column 2 to column 37)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 42, column 13 to column 25)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 42, column 2 to column 41)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 43, column 18 to column 26)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 43, column 2 to column 40)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 44, column 18 to column 22)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 44, column 2 to column 34)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 45, column 18 to column 22)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 45, column 2 to column 34)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 46, column 18 to column 22)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 46, column 2 to column 38)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 47, column 18 to column 22)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 47, column 2 to column 38)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 48, column 18 to column 22)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 48, column 2 to column 49)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 49, column 18 to column 43)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 49, column 2 to column 62)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 50, column 11 to column 23)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 50, column 32 to column 57)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 50, column 2 to column 76)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 51, column 11 to column 23)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 51, column 32 to column 44)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 51, column 2 to column 69)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 52, column 11 to column 23)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 52, column 32 to column 40)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 52, column 2 to column 61)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 53, column 11 to column 23)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 53, column 32 to column 39)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 53, column 2 to column 54)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 55, column 9 to column 14)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 55, column 16 to column 22)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 55, column 2 to column 26)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 56, column 33 to column 39)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 56, column 2 to column 41)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 57, column 45 to column 51)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 57, column 2 to column 53)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 58, column 37 to column 43)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 58, column 2 to column 45)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 59, column 43 to column 49)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 59, column 2 to column 51)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 60, column 49 to column 55)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 60, column 2 to column 57)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 61, column 36 to column 41)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 61, column 43 to column 49)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 61, column 2 to column 51)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 62, column 36 to column 41)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 62, column 43 to column 49)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 62, column 2 to column 51)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 63, column 36 to column 41)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 63, column 43 to column 49)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 63, column 2 to column 51)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 64, column 36 to column 41)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 64, column 43 to column 49)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 64, column 2 to column 51)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 65, column 8 to column 18)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 65, column 2 to column 41)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 66, column 8 to column 14)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 66, column 2 to column 41)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 67, column 8 to column 19)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 67, column 2 to column 43)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 68, column 8 to column 14)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 68, column 2 to column 43)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 69, column 8 to column 12)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 69, column 2 to column 34)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 70, column 8 to column 14)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 70, column 2 to column 41)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 71, column 8 to column 12)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 71, column 2 to column 29)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 72, column 8 to column 14)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 72, column 2 to column 36)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 73, column 8 to column 12)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 73, column 2 to column 29)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 74, column 8 to column 14)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 74, column 2 to column 36)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 75, column 8 to column 12)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 75, column 2 to column 29)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 76, column 8 to column 14)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 76, column 2 to column 36)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 77, column 8 to column 12)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 77, column 2 to column 29)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 78, column 8 to column 14)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 78, column 2 to column 36)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 79, column 45 to column 50)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 79, column 2 to column 52)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 80, column 9 to column 15)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 80, column 2 to column 37)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 81, column 9 to column 15)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 81, column 2 to column 36)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 82, column 26 to column 38)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 82, column 40 to column 48)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 82, column 2 to column 62)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 83, column 26 to column 38)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 83, column 40 to column 65)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 83, column 2 to column 84)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 84, column 18 to column 26)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 84, column 2 to column 37)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 85, column 18 to column 30)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 85, column 2 to column 43)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 87, column 9 to column 21)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 87, column 2 to column 35)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 89, column 35 to column 47)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 89, column 18 to column 23)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 89, column 2 to column 49)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 90, column 2 to column 15)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 91, column 2 to column 15)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 92, column 2 to column 34)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 93, column 2 to column 34)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 94, column 2 to column 20)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 95, column 2 to column 34)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 96, column 2 to column 34)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 97, column 2 to column 26)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 98, column 2 to column 41)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 101, column 2 to column 24)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 102, column 9 to column 21)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 102, column 23 to column 31)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 102, column 2 to column 96)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 103, column 9 to column 21)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 103, column 23 to column 48)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 103, column 2 to line 104, column 78)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 105, column 9 to column 21)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 105, column 23 to column 35)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 105, column 2 to column 92)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 108, column 9 to column 21)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 109, column 9 to column 17)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 110, column 9 to column 13)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 111, column 9 to column 34)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 112, column 9 to column 13)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 113, column 9 to column 13)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 114, column 9 to column 13)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 115, column 9 to column 13)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 116, column 9 to column 21)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 117, column 8 to column 20)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 117, column 29 to column 36)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 118, column 8 to column 20)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 118, column 29 to column 37)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 119, column 8 to column 20)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 119, column 29 to column 54)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 120, column 8 to column 20)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 120, column 29 to column 41)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 124, column 9 to column 13)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 125, column 9 to column 13)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 126, column 9 to column 17)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 127, column 9 to column 13)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 128, column 9 to column 13)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 129, column 9 to column 13)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 130, column 9 to column 34)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 131, column 9 to column 21)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 132, column 8 to column 20)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 132, column 29 to column 36)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 133, column 8 to column 20)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 133, column 29 to column 37)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 134, column 8 to column 20)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 134, column 29 to column 41)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 135, column 8 to column 20)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 135, column 29 to column 54)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 137, column 8 to column 20)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 137, column 38 to column 43)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 138, column 8 to column 20)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 138, column 29 to column 39)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 139, column 8 to column 20)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 139, column 29 to column 35)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 285, column 9 to column 27)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 286, column 9 to column 27)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 287, column 9 to column 27)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 288, column 9 to column 27)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 289, column 8 to column 20)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 289, column 29 to column 35)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 290, column 8 to column 20)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 290, column 29 to column 35)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 291, column 8 to column 20)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 291, column 29 to column 35)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 292, column 8 to column 20)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 292, column 29 to column 35)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 293, column 8 to column 20)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 293, column 29 to column 35)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 294, column 8 to column 20)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 294, column 29 to column 35)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 8, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 2, column 40, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 17, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 11, column 44, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 26, column 10, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 26, column 27, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 26, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 28, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 27, column 25, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 27, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 30, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 20, column 45, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 39, column 10, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 39, column 27, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 39, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 41, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 40, column 25, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 40, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 43, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 33, column 49, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 51, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 52, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 53, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 54, column 11, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 54, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 55, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 46, column 134, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 63, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 64, column 11, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 64, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 65, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 58, column 133, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 70, column 11, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 70, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 71, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 72, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 73, column 31, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 73, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 74, column 31, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 74, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 75, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 68, column 82, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 79, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 78, column 42, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 90, column 2, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 82, column 59, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 100, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 101, column 11, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 101, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 104, column 8, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 105, column 8, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 103, column 49, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 103, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 107, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 108, column 12, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 108, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 109, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 102, column 23, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 102, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 111, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 99, column 40, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 128, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 129, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 130, column 11, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 130, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 133, column 8, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 134, column 8, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 132, column 49, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 132, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 136, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 137, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 138, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 139, column 12, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 139, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 140, column 12, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 140, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 141, column 13, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 141, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 142, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 144, column 15, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 144, column 8, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 145, column 8, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 143, column 28, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 143, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 148, column 14, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 148, column 8, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 149, column 8, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 147, column 19, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 147, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 131, column 23, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 131, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 152, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 126, column 56, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 156, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 157, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 158, column 11, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 158, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 159, column 11, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 159, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 161, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 169, column 8, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 167, column 8, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 165, column 11, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 164, column 8, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 163, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 162, column 23, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 162, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 171, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 155, column 96, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 188, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 189, column 11, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 189, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 191, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 192, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 193, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 194, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 196, column 14, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 196, column 8, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 197, column 8, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 195, column 19, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 195, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 200, column 14, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 200, column 8, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 201, column 8, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 199, column 19, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 199, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 204, column 8, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 205, column 8, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 203, column 35, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 203, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 190, column 23, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 190, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 208, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 187, column 3, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 218, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 219, column 11, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 219, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 221, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 222, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 223, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 224, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 226, column 14, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 226, column 8, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 227, column 8, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 225, column 19, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 225, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 230, column 14, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 230, column 8, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 231, column 8, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 229, column 19, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 229, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 234, column 8, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 233, column 35, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 233, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 220, column 23, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 220, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 237, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 217, column 45, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 247, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 248, column 11, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 248, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 251, column 8, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 252, column 17, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 252, column 8, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 253, column 8, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 250, column 28, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 250, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 249, column 23, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 249, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 256, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 246, column 59, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 260, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 261, column 11, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 261, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 267, column 8, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 266, column 33, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 266, column 11, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 264, column 8, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 263, column 28, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 263, column 6, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 262, column 23, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 262, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 270, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 259, column 92, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 311, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 312, column 11, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 312, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 313, column 11, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 313, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 314, column 11, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 314, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 327, column 11, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 327, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 334, column 11, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 334, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 347, column 11, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 347, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 354, column 11, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 354, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 367, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 310, column 43, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 412, column 11, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 412, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 413, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 414, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 415, column 11, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 415, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 453, column 4, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)",
 " (in '/home/georg/git/maud.git/HC-acetate/src/maud/functions.stan', line 411, column 42, included from\n'/home/georg/git/maud.git/HC-acetate/src/maud/model.stan', line 1, column 0)"};


template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
stan::value_type_t<T1__>>, -1, 1>
unz_1d(const std::vector<Eigen::Matrix<T0__, -1, 1>>& mnsd,
       const T1__& z_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>>;
  int current_statement__ = 0; 
  const auto& z = to_ref(z_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 341;
    return add(rvalue(mnsd, "mnsd", index_uni(1)),
             elt_multiply(rvalue(mnsd, "mnsd", index_uni(2)), z));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct unz_1d_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
stan::value_type_t<T1__>>, -1, 1>
operator()(const std::vector<Eigen::Matrix<T0__, -1, 1>>& mnsd,
           const T1__& z, std::ostream* pstream__)  const 
{
return unz_1d(mnsd, z, pstream__);
}
};

template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
stan::value_type_t<T1__>>, -1, 1>
unz_log_1d(const std::vector<Eigen::Matrix<T0__, -1, 1>>& mnsd,
           const T1__& z_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>>;
  int current_statement__ = 0; 
  const auto& z = to_ref(z_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 343;
    return stan::math::exp(
             add(stan::math::log(rvalue(mnsd, "mnsd", index_uni(1))),
               elt_multiply(rvalue(mnsd, "mnsd", index_uni(2)), z)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct unz_log_1d_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
stan::value_type_t<T1__>>, -1, 1>
operator()(const std::vector<Eigen::Matrix<T0__, -1, 1>>& mnsd,
           const T1__& z, std::ostream* pstream__)  const 
{
return unz_log_1d(mnsd, z, pstream__);
}
};

template <typename T0__, typename T1__>
std::vector<Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>>
unz_2d(const std::vector<std::vector<Eigen::Matrix<T0__, -1, 1>>>& mnsd,
       const std::vector<Eigen::Matrix<T1__, -1, 1>>& z,
       std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 345;
    validate_non_negative_index("out", "size(z)", size(z));
    current_statement__ = 346;
    validate_non_negative_index("out", "rows(z[1])",
                                rows(rvalue(z, "z", index_uni(1))));
    std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> out;
    out = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(size(z), Eigen::Matrix<local_scalar_t__, -1, 1>(
      rows(rvalue(z, "z", index_uni(1)))));
    stan::math::fill(out, DUMMY_VAR__);
    
    current_statement__ = 350;
    for (int ex = 1; ex <= size(z); ++ex) {
      current_statement__ = 348;
      assign(out,
        unz_1d(rvalue(mnsd, "mnsd", index_omni(), index_uni(ex)),
          rvalue(z, "z", index_uni(ex)), pstream__),
        "assigning variable out", index_uni(ex));
    }
    current_statement__ = 351;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct unz_2d_functor__ {
template <typename T0__, typename T1__>
std::vector<Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>>
operator()(const std::vector<std::vector<Eigen::Matrix<T0__, -1, 1>>>& mnsd,
           const std::vector<Eigen::Matrix<T1__, -1, 1>>& z,
           std::ostream* pstream__)  const 
{
return unz_2d(mnsd, z, pstream__);
}
};

template <typename T0__, typename T1__>
std::vector<Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>>
unz_log_2d(const std::vector<std::vector<Eigen::Matrix<T0__, -1, 1>>>& mnsd,
           const std::vector<Eigen::Matrix<T1__, -1, 1>>& z,
           std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 353;
    validate_non_negative_index("out", "size(z)", size(z));
    current_statement__ = 354;
    validate_non_negative_index("out", "rows(z[1])",
                                rows(rvalue(z, "z", index_uni(1))));
    std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> out;
    out = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(size(z), Eigen::Matrix<local_scalar_t__, -1, 1>(
      rows(rvalue(z, "z", index_uni(1)))));
    stan::math::fill(out, DUMMY_VAR__);
    
    current_statement__ = 358;
    for (int ex = 1; ex <= size(z); ++ex) {
      current_statement__ = 356;
      assign(out,
        unz_log_1d(rvalue(mnsd, "mnsd", index_omni(), index_uni(ex)),
          rvalue(z, "z", index_uni(ex)), pstream__),
        "assigning variable out", index_uni(ex));
    }
    current_statement__ = 359;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct unz_log_2d_functor__ {
template <typename T0__, typename T1__>
std::vector<Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>>
operator()(const std::vector<std::vector<Eigen::Matrix<T0__, -1, 1>>>& mnsd,
           const std::vector<Eigen::Matrix<T1__, -1, 1>>& z,
           std::ostream* pstream__)  const 
{
return unz_log_2d(mnsd, z, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T4__,
typename T5__, typename T6__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__, stan::value_type_t<T4__>,
stan::value_type_t<T5__>, stan::promote_args_t<T6__>>, -1, 1>
get_dgrs(const T0__& S_arg__, const T1__& dgf_arg__, const T2__& temperature,
         const std::vector<int>& mic_to_met,
         const T4__& water_stoichiometry_arg__,
         const T5__& trans_charge_arg__, const T6__& psi,
         std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          T2__,
          stan::value_type_t<T4__>,
          stan::value_type_t<T5__>, stan::promote_args_t<T6__>>;
  int current_statement__ = 0; 
  const auto& S = to_ref(S_arg__);
  const auto& dgf = to_ref(dgf_arg__);
  const auto& water_stoichiometry = to_ref(water_stoichiometry_arg__);
  const auto& trans_charge = to_ref(trans_charge_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ minus_RT;
    minus_RT = DUMMY_VAR__;
    
    current_statement__ = 361;
    minus_RT = (-0.008314 * temperature);
    local_scalar_t__ dgf_water;
    dgf_water = DUMMY_VAR__;
    
    current_statement__ = 362;
    dgf_water = -150.9;
    local_scalar_t__ F;
    F = DUMMY_VAR__;
    
    current_statement__ = 363;
    F = 96.5;
    current_statement__ = 364;
    validate_non_negative_index("dgrs", "cols(S)", cols(S));
    Eigen::Matrix<local_scalar_t__, -1, 1> dgrs;
    dgrs = Eigen::Matrix<local_scalar_t__, -1, 1>(cols(S));
    stan::math::fill(dgrs, DUMMY_VAR__);
    
    current_statement__ = 365;
    assign(dgrs,
      add(
        add(
          multiply(transpose(S), rvalue(dgf, "dgf", index_multi(mic_to_met))),
          multiply(water_stoichiometry, dgf_water)),
        multiply(multiply(trans_charge, psi), F)), "assigning variable dgrs");
    current_statement__ = 366;
    return dgrs;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct get_dgrs_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T4__,
typename T5__, typename T6__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__, stan::value_type_t<T4__>,
stan::value_type_t<T5__>, stan::promote_args_t<T6__>>, -1, 1>
operator()(const T0__& S, const T1__& dgf, const T2__& temperature,
           const std::vector<int>& mic_to_met,
           const T4__& water_stoichiometry, const T5__& trans_charge,
           const T6__& psi, std::ostream* pstream__)  const 
{
return get_dgrs(S, dgf, temperature, mic_to_met, water_stoichiometry,
         trans_charge, psi, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T4__,
typename T5__, typename T6__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__, stan::value_type_t<T4__>,
stan::value_type_t<T5__>, stan::promote_args_t<T6__>>, -1, 1>
get_keq(const T0__& S_arg__, const T1__& dgf_arg__, const T2__& temperature,
        const std::vector<int>& mic_to_met,
        const T4__& water_stoichiometry_arg__,
        const T5__& trans_charge_arg__, const T6__& psi,
        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          T2__,
          stan::value_type_t<T4__>,
          stan::value_type_t<T5__>, stan::promote_args_t<T6__>>;
  int current_statement__ = 0; 
  const auto& S = to_ref(S_arg__);
  const auto& dgf = to_ref(dgf_arg__);
  const auto& water_stoichiometry = to_ref(water_stoichiometry_arg__);
  const auto& trans_charge = to_ref(trans_charge_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ minus_RT;
    minus_RT = DUMMY_VAR__;
    
    current_statement__ = 368;
    minus_RT = (-0.008314 * temperature);
    current_statement__ = 369;
    validate_non_negative_index("dgrs", "cols(S)", cols(S));
    Eigen::Matrix<local_scalar_t__, -1, 1> dgrs;
    dgrs = Eigen::Matrix<local_scalar_t__, -1, 1>(cols(S));
    stan::math::fill(dgrs, DUMMY_VAR__);
    
    current_statement__ = 370;
    assign(dgrs,
      get_dgrs(S, dgf, temperature, mic_to_met, water_stoichiometry,
        trans_charge, psi, pstream__), "assigning variable dgrs");
    current_statement__ = 371;
    return stan::math::exp(divide(dgrs, minus_RT));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct get_keq_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T4__,
typename T5__, typename T6__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__, stan::value_type_t<T4__>,
stan::value_type_t<T5__>, stan::promote_args_t<T6__>>, -1, 1>
operator()(const T0__& S, const T1__& dgf, const T2__& temperature,
           const std::vector<int>& mic_to_met,
           const T4__& water_stoichiometry, const T5__& trans_charge,
           const T6__& psi, std::ostream* pstream__)  const 
{
return get_keq(S, dgf, temperature, mic_to_met, water_stoichiometry,
         trans_charge, psi, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
int
check_steady_state(const T0__& Sv_arg__, const T1__& conc_arg__,
                   const T2__& abs_thresh, const T3__& rel_thresh,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          T2__,
          T3__>;
  int current_statement__ = 0; 
  const auto& Sv = to_ref(Sv_arg__);
  const auto& conc = to_ref(conc_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 373;
    validate_non_negative_index("rel_thresh_per_conc", "rows(conc)",
                                rows(conc));
    Eigen::Matrix<local_scalar_t__, -1, 1> rel_thresh_per_conc;
    rel_thresh_per_conc = Eigen::Matrix<local_scalar_t__, -1, 1>(rows(conc));
    stan::math::fill(rel_thresh_per_conc, DUMMY_VAR__);
    
    current_statement__ = 374;
    assign(rel_thresh_per_conc, multiply(conc, rel_thresh),
      "assigning variable rel_thresh_per_conc");
    int relative_check_failed;
    relative_check_failed = std::numeric_limits<int>::min();
    
    current_statement__ = 375;
    relative_check_failed = logical_gt(
                              max(
                                subtract(stan::math::fabs(Sv),
                                  rel_thresh_per_conc)), 0);
    int absolute_check_failed;
    absolute_check_failed = std::numeric_limits<int>::min();
    
    current_statement__ = 376;
    absolute_check_failed = logical_gt(max(stan::math::fabs(Sv)), abs_thresh);
    current_statement__ = 378;
    if (relative_check_failed) {
      current_statement__ = 377;
      if (pstream__) {
        stan_print(pstream__, "Sv ");
        stan_print(pstream__, Sv);
        stan_print(pstream__, " not within ");
        stan_print(pstream__, rel_thresh_per_conc);
        stan_print(pstream__, " of zero.");
        stan_print(pstream__, "\n");
      }
    } 
    current_statement__ = 380;
    if (absolute_check_failed) {
      current_statement__ = 379;
      if (pstream__) {
        stan_print(pstream__, "Sv ");
        stan_print(pstream__, Sv);
        stan_print(pstream__, " not within ");
        stan_print(pstream__, abs_thresh);
        stan_print(pstream__, " of zero.");
        stan_print(pstream__, "\n");
      }
    } 
    current_statement__ = 381;
    return ((primitive_value(relative_check_failed) || primitive_value(
              absolute_check_failed)) ? 0 : 1);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct check_steady_state_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
int
operator()(const T0__& Sv, const T1__& conc, const T2__& abs_thresh,
           const T3__& rel_thresh, std::ostream* pstream__)  const 
{
return check_steady_state(Sv, conc, abs_thresh, rel_thresh, pstream__);
}
};

int
measure_ragged(const std::vector<std::vector<int>>& bounds, const int& i,
               std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 383;
    return ((rvalue(bounds, "bounds", index_uni(i), index_uni(2)) -
              rvalue(bounds, "bounds", index_uni(i), index_uni(1))) + 1);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct measure_ragged_functor__ {
int
operator()(const std::vector<std::vector<int>>& bounds, const int& i,
           std::ostream* pstream__)  const 
{
return measure_ragged(bounds, i, pstream__);
}
};

std::vector<int>
extract_ragged(const std::vector<int>& ix_long,
               const std::vector<std::vector<int>>& bounds, const int& i,
               std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 385;
    return rvalue(ix_long, "ix_long",
             index_min_max(rvalue(bounds, "bounds",
                             index_uni(i), index_uni(1)), rvalue(bounds,
                                                            "bounds",
                                                            index_uni(i),
                                                              index_uni(2))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct extract_ragged_functor__ {
std::vector<int>
operator()(const std::vector<int>& ix_long,
           const std::vector<std::vector<int>>& bounds, const int& i,
           std::ostream* pstream__)  const 
{
return extract_ragged(ix_long, bounds, i, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>>, -1, 1>
get_saturation(const T0__& conc_arg__, const T1__& km_arg__,
               const T2__& free_enzyme_ratio_arg__,
               const std::vector<std::vector<int>>& km_lookup,
               const std::vector<int>& sub_by_edge_long,
               const std::vector<std::vector<int>>& sub_by_edge_bounds,
               const std::vector<int>& edge_type, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>>;
  int current_statement__ = 0; 
  const auto& conc = to_ref(conc_arg__);
  const auto& km = to_ref(km_arg__);
  const auto& free_enzyme_ratio = to_ref(free_enzyme_ratio_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int N_edge;
    N_edge = std::numeric_limits<int>::min();
    
    current_statement__ = 387;
    N_edge = size(sub_by_edge_bounds);
    current_statement__ = 388;
    validate_non_negative_index("prod_conc_over_km", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__, -1, 1> prod_conc_over_km;
    prod_conc_over_km = Eigen::Matrix<local_scalar_t__, -1, 1>(N_edge);
    stan::math::fill(prod_conc_over_km, DUMMY_VAR__);
    
    current_statement__ = 399;
    for (int f = 1; f <= N_edge; ++f) {
      current_statement__ = 393;
      if ((primitive_value(
          logical_eq(rvalue(edge_type, "edge_type", index_uni(f)), 2)) ||
          primitive_value(
          logical_eq(rvalue(edge_type, "edge_type", index_uni(f)), 4)))) {
        current_statement__ = 390;
        assign(prod_conc_over_km, 1,
          "assigning variable prod_conc_over_km", index_uni(f));
        continue;
      } 
      int N_sub;
      N_sub = std::numeric_limits<int>::min();
      
      current_statement__ = 394;
      N_sub = measure_ragged(sub_by_edge_bounds, f, pstream__);
      current_statement__ = 395;
      validate_non_negative_index("sub_ix", "N_sub", N_sub);
      std::vector<int> sub_ix;
      sub_ix = std::vector<int>(N_sub, std::numeric_limits<int>::min());
      
      current_statement__ = 396;
      assign(sub_ix,
        extract_ragged(sub_by_edge_long, sub_by_edge_bounds, f, pstream__),
        "assigning variable sub_ix");
      current_statement__ = 397;
      assign(prod_conc_over_km,
        prod(
          elt_divide(rvalue(conc, "conc", index_multi(sub_ix)),
            rvalue(km, "km",
              index_multi(rvalue(km_lookup, "km_lookup",
                            index_multi(sub_ix), index_uni(f)))))),
        "assigning variable prod_conc_over_km", index_uni(f));
    }
    current_statement__ = 400;
    return elt_multiply(prod_conc_over_km, free_enzyme_ratio);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct get_saturation_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>>, -1, 1>
operator()(const T0__& conc, const T1__& km, const T2__& free_enzyme_ratio,
           const std::vector<std::vector<int>>& km_lookup,
           const std::vector<int>& sub_by_edge_long,
           const std::vector<std::vector<int>>& sub_by_edge_bounds,
           const std::vector<int>& edge_type, std::ostream* pstream__)  const 
{
return get_saturation(conc, km, free_enzyme_ratio, km_lookup,
         sub_by_edge_long, sub_by_edge_bounds, edge_type, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>,
stan::value_type_t<T3__>>, -1, 1>
get_free_enzyme_ratio(const T0__& conc_arg__, const T1__& S_arg__,
                      const T2__& km_arg__, const T3__& ki_arg__,
                      const std::vector<int>& edge_type,
                      const std::vector<std::vector<int>>& km_lookup,
                      const std::vector<std::vector<int>>& ki_lookup,
                      const std::vector<int>& sub_by_edge_long,
                      const std::vector<std::vector<int>>& sub_by_edge_bounds,
                      const std::vector<int>& prod_by_edge_long,
                      const std::vector<std::vector<int>>& prod_by_edge_bounds,
                      const std::vector<int>& ci_by_edge_long,
                      const std::vector<std::vector<int>>& ci_by_edge_bounds,
                      std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>>;
  int current_statement__ = 0; 
  const auto& conc = to_ref(conc_arg__);
  const auto& S = to_ref(S_arg__);
  const auto& km = to_ref(km_arg__);
  const auto& ki = to_ref(ki_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int N_km;
    N_km = std::numeric_limits<int>::min();
    
    current_statement__ = 402;
    N_km = rows(km);
    int N_edge;
    N_edge = std::numeric_limits<int>::min();
    
    current_statement__ = 403;
    N_edge = cols(S);
    current_statement__ = 404;
    validate_non_negative_index("denom", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__, -1, 1> denom;
    denom = Eigen::Matrix<local_scalar_t__, -1, 1>(N_edge);
    stan::math::fill(denom, DUMMY_VAR__);
    
    current_statement__ = 431;
    for (int f = 1; f <= N_edge; ++f) {
      current_statement__ = 409;
      if ((primitive_value(
          logical_eq(rvalue(edge_type, "edge_type", index_uni(f)), 2)) ||
          primitive_value(
          logical_eq(rvalue(edge_type, "edge_type", index_uni(f)), 4)))) {
        current_statement__ = 406;
        assign(denom, 1, "assigning variable denom", index_uni(f));
        continue;
      } 
      int N_sub;
      N_sub = std::numeric_limits<int>::min();
      
      current_statement__ = 410;
      N_sub = measure_ragged(sub_by_edge_bounds, f, pstream__);
      int N_prod;
      N_prod = std::numeric_limits<int>::min();
      
      current_statement__ = 411;
      N_prod = measure_ragged(prod_by_edge_bounds, f, pstream__);
      int N_ci;
      N_ci = std::numeric_limits<int>::min();
      
      current_statement__ = 412;
      N_ci = measure_ragged(ci_by_edge_bounds, f, pstream__);
      current_statement__ = 413;
      validate_non_negative_index("sub_ix", "N_sub", N_sub);
      std::vector<int> sub_ix;
      sub_ix = std::vector<int>(N_sub, std::numeric_limits<int>::min());
      
      current_statement__ = 414;
      assign(sub_ix,
        extract_ragged(sub_by_edge_long, sub_by_edge_bounds, f, pstream__),
        "assigning variable sub_ix");
      current_statement__ = 415;
      validate_non_negative_index("prod_ix", "N_prod", N_prod);
      std::vector<int> prod_ix;
      prod_ix = std::vector<int>(N_prod, std::numeric_limits<int>::min());
      
      current_statement__ = 416;
      assign(prod_ix,
        extract_ragged(prod_by_edge_long, prod_by_edge_bounds, f, pstream__),
        "assigning variable prod_ix");
      current_statement__ = 417;
      validate_non_negative_index("sub_over_km", "N_sub", N_sub);
      Eigen::Matrix<local_scalar_t__, -1, 1> sub_over_km;
      sub_over_km = Eigen::Matrix<local_scalar_t__, -1, 1>(N_sub);
      stan::math::fill(sub_over_km, DUMMY_VAR__);
      
      current_statement__ = 418;
      assign(sub_over_km,
        elt_divide(rvalue(conc, "conc", index_multi(sub_ix)),
          rvalue(km, "km",
            index_multi(rvalue(km_lookup, "km_lookup",
                          index_multi(sub_ix), index_uni(f))))),
        "assigning variable sub_over_km");
      current_statement__ = 419;
      assign(denom,
        prod(
          pow(add(rep_vector(1, N_sub), sub_over_km),
            stan::math::fabs(
              rvalue(S, "S", index_multi(sub_ix), index_uni(f))))),
        "assigning variable denom", index_uni(f));
      current_statement__ = 424;
      if (logical_eq(rvalue(edge_type, "edge_type", index_uni(f)), 1)) {
        current_statement__ = 420;
        validate_non_negative_index("prod_over_km", "N_prod", N_prod);
        Eigen::Matrix<local_scalar_t__, -1, 1> prod_over_km;
        prod_over_km = Eigen::Matrix<local_scalar_t__, -1, 1>(N_prod);
        stan::math::fill(prod_over_km, DUMMY_VAR__);
        
        current_statement__ = 421;
        assign(prod_over_km,
          elt_divide(rvalue(conc, "conc", index_multi(prod_ix)),
            rvalue(km, "km",
              index_multi(rvalue(km_lookup, "km_lookup",
                            index_multi(prod_ix), index_uni(f))))),
          "assigning variable prod_over_km");
        current_statement__ = 422;
        assign(denom,
          (rvalue(denom, "denom", index_uni(f)) +
            (prod(
               pow(add(rep_vector(1, N_prod), prod_over_km),
                 stan::math::fabs(
                   rvalue(S, "S", index_multi(prod_ix), index_uni(f))))) - 1)),
          "assigning variable denom", index_uni(f));
      } 
      current_statement__ = 429;
      if (logical_gt(N_ci, 0)) {
        current_statement__ = 425;
        validate_non_negative_index("ci_ix", "N_ci", N_ci);
        std::vector<int> ci_ix;
        ci_ix = std::vector<int>(N_ci, std::numeric_limits<int>::min());
        
        current_statement__ = 426;
        assign(ci_ix,
          extract_ragged(ci_by_edge_long, ci_by_edge_bounds, f, pstream__),
          "assigning variable ci_ix");
        current_statement__ = 427;
        assign(denom,
          (rvalue(denom, "denom", index_uni(f)) +
            sum(
              elt_divide(rvalue(conc, "conc", index_multi(ci_ix)),
                rvalue(ki, "ki",
                  index_multi(rvalue(ki_lookup, "ki_lookup",
                                index_multi(ci_ix), index_uni(f))))))),
          "assigning variable denom", index_uni(f));
      } 
    }
    current_statement__ = 432;
    return inv(denom);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct get_free_enzyme_ratio_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>,
stan::value_type_t<T3__>>, -1, 1>
operator()(const T0__& conc, const T1__& S, const T2__& km, const T3__& ki,
           const std::vector<int>& edge_type,
           const std::vector<std::vector<int>>& km_lookup,
           const std::vector<std::vector<int>>& ki_lookup,
           const std::vector<int>& sub_by_edge_long,
           const std::vector<std::vector<int>>& sub_by_edge_bounds,
           const std::vector<int>& prod_by_edge_long,
           const std::vector<std::vector<int>>& prod_by_edge_bounds,
           const std::vector<int>& ci_by_edge_long,
           const std::vector<std::vector<int>>& ci_by_edge_bounds,
           std::ostream* pstream__)  const 
{
return get_free_enzyme_ratio(conc, S, km, ki, edge_type, km_lookup,
         ki_lookup, sub_by_edge_long, sub_by_edge_bounds, prod_by_edge_long,
         prod_by_edge_bounds, ci_by_edge_long, ci_by_edge_bounds, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__,
stan::value_type_t<T2__>,
stan::value_type_t<T3__>>, -1, 1>
get_reversibility(const T0__& dgr_arg__, const T1__& temperature,
                  const T2__& S_arg__, const T3__& conc_arg__,
                  const std::vector<int>& edge_type, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T1__,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>>;
  int current_statement__ = 0; 
  const auto& dgr = to_ref(dgr_arg__);
  const auto& S = to_ref(S_arg__);
  const auto& conc = to_ref(conc_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ RT;
    RT = DUMMY_VAR__;
    
    current_statement__ = 434;
    RT = (0.008314 * temperature);
    int N_edge;
    N_edge = std::numeric_limits<int>::min();
    
    current_statement__ = 435;
    N_edge = cols(S);
    current_statement__ = 436;
    validate_non_negative_index("reaction_quotient", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__, -1, 1> reaction_quotient;
    reaction_quotient = Eigen::Matrix<local_scalar_t__, -1, 1>(N_edge);
    stan::math::fill(reaction_quotient, DUMMY_VAR__);
    
    current_statement__ = 437;
    assign(reaction_quotient, multiply(transpose(S), stan::math::log(conc)),
      "assigning variable reaction_quotient");
    current_statement__ = 438;
    validate_non_negative_index("out", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__, -1, 1> out;
    out = Eigen::Matrix<local_scalar_t__, -1, 1>(N_edge);
    stan::math::fill(out, DUMMY_VAR__);
    
    local_scalar_t__ ace_phpk;
    ace_phpk = DUMMY_VAR__;
    
    current_statement__ = 440;
    ace_phpk = 0.8614406;
    current_statement__ = 447;
    for (int f = 1; f <= N_edge; ++f) {
      current_statement__ = 445;
      if (logical_eq(rvalue(edge_type, "edge_type", index_uni(f)), 1)) {
        current_statement__ = 444;
        assign(out,
          (1 -
            stan::math::exp(
              ((rvalue(dgr, "dgr", index_uni(f)) +
                 (RT *
                   rvalue(reaction_quotient, "reaction_quotient",
                     index_uni(f)))) / RT))),
          "assigning variable out", index_uni(f));
      } else {
        current_statement__ = 443;
        if (logical_eq(rvalue(edge_type, "edge_type", index_uni(f)), 4)) {
          current_statement__ = 442;
          assign(out,
            (1 -
              stan::math::exp(
                ((rvalue(dgr, "dgr", index_uni(f)) +
                   (RT *
                     (rvalue(reaction_quotient, "reaction_quotient",
                        index_uni(f)) + stan::math::log(ace_phpk)))) / RT))),
            "assigning variable out", index_uni(f));
        } else {
          current_statement__ = 441;
          assign(out, 1, "assigning variable out", index_uni(f));
        }
      }
    }
    current_statement__ = 448;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct get_reversibility_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__,
stan::value_type_t<T2__>,
stan::value_type_t<T3__>>, -1, 1>
operator()(const T0__& dgr, const T1__& temperature, const T2__& S,
           const T3__& conc, const std::vector<int>& edge_type,
           std::ostream* pstream__)  const 
{
return get_reversibility(dgr, temperature, S, conc, edge_type, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>>>, -1, 1>
get_allostery(const T0__& conc_arg__, const T1__& free_enzyme_ratio_arg__,
              const T2__& tc_arg__, const T3__& dt_arg__,
              const T4__& dr_arg__, const T5__& subunits_arg__,
              const std::vector<std::vector<int>>& dt_lookup,
              const std::vector<std::vector<int>>& dr_lookup,
              const std::vector<int>& edge_to_tc,
              const std::vector<int>& ai_ix_long,
              const std::vector<std::vector<int>>& ai_ix_bounds,
              const std::vector<int>& aa_ix_long,
              const std::vector<std::vector<int>>& aa_ix_bounds,
              std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>,
          stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>>>;
  int current_statement__ = 0; 
  const auto& conc = to_ref(conc_arg__);
  const auto& free_enzyme_ratio = to_ref(free_enzyme_ratio_arg__);
  const auto& tc = to_ref(tc_arg__);
  const auto& dt = to_ref(dt_arg__);
  const auto& dr = to_ref(dr_arg__);
  const auto& subunits = to_ref(subunits_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int N_edge;
    N_edge = std::numeric_limits<int>::min();
    
    current_statement__ = 450;
    N_edge = size(aa_ix_bounds);
    current_statement__ = 451;
    validate_non_negative_index("out", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__, -1, 1> out;
    out = Eigen::Matrix<local_scalar_t__, -1, 1>(N_edge);
    stan::math::fill(out, DUMMY_VAR__);
    
    current_statement__ = 452;
    assign(out, rep_vector(1, N_edge), "assigning variable out");
    current_statement__ = 472;
    for (int f = 1; f <= N_edge; ++f) {
      int N_ai;
      N_ai = std::numeric_limits<int>::min();
      
      current_statement__ = 453;
      N_ai = measure_ragged(ai_ix_bounds, f, pstream__);
      int N_aa;
      N_aa = std::numeric_limits<int>::min();
      
      current_statement__ = 454;
      N_aa = measure_ragged(aa_ix_bounds, f, pstream__);
      local_scalar_t__ Q_num;
      Q_num = DUMMY_VAR__;
      
      current_statement__ = 455;
      Q_num = 1;
      local_scalar_t__ Q_denom;
      Q_denom = DUMMY_VAR__;
      
      current_statement__ = 456;
      Q_denom = 1;
      current_statement__ = 461;
      if (logical_gt(N_ai, 0)) {
        current_statement__ = 457;
        validate_non_negative_index("ais", "N_ai", N_ai);
        std::vector<int> ais;
        ais = std::vector<int>(N_ai, std::numeric_limits<int>::min());
        
        current_statement__ = 458;
        assign(ais, extract_ragged(ai_ix_long, ai_ix_bounds, f, pstream__),
          "assigning variable ais");
        current_statement__ = 459;
        Q_num = (1 +
                  sum(
                    elt_divide(rvalue(conc, "conc", index_multi(ais)),
                      rvalue(dt, "dt",
                        index_multi(rvalue(dt_lookup, "dt_lookup",
                                      index_multi(ais), index_uni(f)))))));
      } 
      current_statement__ = 466;
      if (logical_gt(N_aa, 0)) {
        current_statement__ = 462;
        validate_non_negative_index("aas", "N_aa", N_aa);
        std::vector<int> aas;
        aas = std::vector<int>(N_aa, std::numeric_limits<int>::min());
        
        current_statement__ = 463;
        assign(aas, extract_ragged(aa_ix_long, aa_ix_bounds, f, pstream__),
          "assigning variable aas");
        current_statement__ = 464;
        Q_denom = (1 +
                    sum(
                      elt_divide(rvalue(conc, "conc", index_multi(aas)),
                        rvalue(dr, "dr",
                          index_multi(rvalue(dr_lookup, "dr_lookup",
                                        index_multi(aas), index_uni(f)))))));
      } 
      current_statement__ = 470;
      if ((primitive_value(logical_gt(N_ai, 0)) || primitive_value(
          logical_gt(N_aa, 0)))) {
        local_scalar_t__ tc_f;
        tc_f = DUMMY_VAR__;
        
        current_statement__ = 467;
        tc_f = rvalue(tc, "tc",
                 index_uni(rvalue(edge_to_tc, "edge_to_tc", index_uni(f))));
        current_statement__ = 468;
        assign(out,
          inv(
            (1 +
              (tc_f *
                pow(
                  ((rvalue(free_enzyme_ratio, "free_enzyme_ratio",
                      index_uni(f)) * Q_num) / Q_denom),
                  rvalue(subunits, "subunits", index_uni(f)))))),
          "assigning variable out", index_uni(f));
      } 
    }
    current_statement__ = 473;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct get_allostery_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>>>, -1, 1>
operator()(const T0__& conc, const T1__& free_enzyme_ratio, const T2__& tc,
           const T3__& dt, const T4__& dr, const T5__& subunits,
           const std::vector<std::vector<int>>& dt_lookup,
           const std::vector<std::vector<int>>& dr_lookup,
           const std::vector<int>& edge_to_tc,
           const std::vector<int>& ai_ix_long,
           const std::vector<std::vector<int>>& ai_ix_bounds,
           const std::vector<int>& aa_ix_long,
           const std::vector<std::vector<int>>& aa_ix_bounds,
           std::ostream* pstream__)  const 
{
return get_allostery(conc, free_enzyme_ratio, tc, dt, dr, subunits,
         dt_lookup, dr_lookup, edge_to_tc, ai_ix_long, ai_ix_bounds,
         aa_ix_long, aa_ix_bounds, pstream__);
}
};

template <typename T0__, typename T1__, typename T6__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T6__>>, -1, 1>
get_phosphorylation(const T0__& kcat_phos_arg__, const T1__& conc_phos_arg__,
                    const std::vector<int>& pa_ix_long,
                    const std::vector<std::vector<int>>& pa_ix_bounds,
                    const std::vector<int>& pi_ix_long,
                    const std::vector<std::vector<int>>& pi_ix_bounds,
                    const T6__& subunits_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          stan::value_type_t<T6__>>;
  int current_statement__ = 0; 
  const auto& kcat_phos = to_ref(kcat_phos_arg__);
  const auto& conc_phos = to_ref(conc_phos_arg__);
  const auto& subunits = to_ref(subunits_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int N_edge;
    N_edge = std::numeric_limits<int>::min();
    
    current_statement__ = 475;
    N_edge = size(pa_ix_bounds);
    current_statement__ = 476;
    validate_non_negative_index("out", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__, -1, 1> out;
    out = Eigen::Matrix<local_scalar_t__, -1, 1>(N_edge);
    stan::math::fill(out, DUMMY_VAR__);
    
    current_statement__ = 477;
    assign(out, rep_vector(1, N_edge), "assigning variable out");
    current_statement__ = 496;
    for (int f = 1; f <= N_edge; ++f) {
      local_scalar_t__ alpha;
      alpha = DUMMY_VAR__;
      
      current_statement__ = 478;
      alpha = 0;
      local_scalar_t__ beta;
      beta = DUMMY_VAR__;
      
      current_statement__ = 479;
      beta = 0;
      int N_pa;
      N_pa = std::numeric_limits<int>::min();
      
      current_statement__ = 480;
      N_pa = measure_ragged(pa_ix_bounds, f, pstream__);
      int N_pi;
      N_pi = std::numeric_limits<int>::min();
      
      current_statement__ = 481;
      N_pi = measure_ragged(pi_ix_bounds, f, pstream__);
      current_statement__ = 486;
      if (logical_gt(N_pa, 0)) {
        current_statement__ = 482;
        validate_non_negative_index("pas", "N_pa", N_pa);
        std::vector<int> pas;
        pas = std::vector<int>(N_pa, std::numeric_limits<int>::min());
        
        current_statement__ = 483;
        assign(pas, extract_ragged(pa_ix_long, pa_ix_bounds, f, pstream__),
          "assigning variable pas");
        current_statement__ = 484;
        beta = sum(
                 elt_multiply(
                   rvalue(kcat_phos, "kcat_phos", index_multi(pas)),
                   rvalue(conc_phos, "conc_phos", index_multi(pas))));
      } 
      current_statement__ = 491;
      if (logical_gt(N_pi, 0)) {
        current_statement__ = 487;
        validate_non_negative_index("pis", "N_pi", N_pi);
        std::vector<int> pis;
        pis = std::vector<int>(N_pi, std::numeric_limits<int>::min());
        
        current_statement__ = 488;
        assign(pis, extract_ragged(pi_ix_long, pi_ix_bounds, f, pstream__),
          "assigning variable pis");
        current_statement__ = 489;
        alpha = sum(
                  elt_multiply(
                    rvalue(kcat_phos, "kcat_phos", index_multi(pis)),
                    rvalue(conc_phos, "conc_phos", index_multi(pis))));
      } 
      current_statement__ = 494;
      if ((primitive_value(logical_gt(N_pi, 0)) || primitive_value(
          logical_gt(N_pa, 0)))) {
        current_statement__ = 492;
        assign(out,
          inv(
            (1 +
              pow((alpha / beta), rvalue(subunits, "subunits", index_uni(f))))),
          "assigning variable out", index_uni(f));
      } 
    }
    current_statement__ = 497;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct get_phosphorylation_functor__ {
template <typename T0__, typename T1__, typename T6__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T6__>>, -1, 1>
operator()(const T0__& kcat_phos, const T1__& conc_phos,
           const std::vector<int>& pa_ix_long,
           const std::vector<std::vector<int>>& pa_ix_bounds,
           const std::vector<int>& pi_ix_long,
           const std::vector<std::vector<int>>& pi_ix_bounds,
           const T6__& subunits, std::ostream* pstream__)  const 
{
return get_phosphorylation(kcat_phos, conc_phos, pa_ix_long, pa_ix_bounds,
         pi_ix_long, pi_ix_bounds, subunits, pstream__);
}
};

template <typename T0__, typename T1__, typename T6__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T6__>, -1, 1>
get_drain_by_edge(const T0__& drain_arg__, const T1__& conc_arg__,
                  const std::vector<int>& edge_to_drain,
                  const std::vector<int>& sub_by_edge_long,
                  const std::vector<std::vector<int>>& sub_by_edge_bounds,
                  const std::vector<int>& edge_type,
                  const T6__& drain_small_conc_corrector,
                  std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          T6__>;
  int current_statement__ = 0; 
  const auto& drain = to_ref(drain_arg__);
  const auto& conc = to_ref(conc_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int N_edge;
    N_edge = std::numeric_limits<int>::min();
    
    current_statement__ = 499;
    N_edge = size(edge_type);
    current_statement__ = 500;
    validate_non_negative_index("out", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__, -1, 1> out;
    out = Eigen::Matrix<local_scalar_t__, -1, 1>(N_edge);
    stan::math::fill(out, DUMMY_VAR__);
    
    current_statement__ = 501;
    assign(out, rep_vector(1, N_edge), "assigning variable out");
    current_statement__ = 509;
    for (int f = 1; f <= N_edge; ++f) {
      current_statement__ = 507;
      if (logical_eq(rvalue(edge_type, "edge_type", index_uni(f)), 2)) {
        int N_sub;
        N_sub = std::numeric_limits<int>::min();
        
        current_statement__ = 502;
        N_sub = measure_ragged(sub_by_edge_bounds, f, pstream__);
        current_statement__ = 503;
        validate_non_negative_index("subs", "N_sub", N_sub);
        std::vector<int> subs;
        subs = std::vector<int>(N_sub, std::numeric_limits<int>::min());
        
        current_statement__ = 504;
        assign(subs,
          extract_ragged(sub_by_edge_long, sub_by_edge_bounds, f, pstream__),
          "assigning variable subs");
        current_statement__ = 505;
        assign(out,
          (rvalue(drain, "drain",
             index_uni(rvalue(edge_to_drain, "edge_to_drain", index_uni(f))))
            *
            prod(
              elt_divide(rvalue(conc, "conc", index_multi(subs)),
                add(rvalue(conc, "conc", index_multi(subs)),
                  drain_small_conc_corrector)))),
          "assigning variable out", index_uni(f));
      } 
    }
    current_statement__ = 510;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct get_drain_by_edge_functor__ {
template <typename T0__, typename T1__, typename T6__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T6__>, -1, 1>
operator()(const T0__& drain, const T1__& conc,
           const std::vector<int>& edge_to_drain,
           const std::vector<int>& sub_by_edge_long,
           const std::vector<std::vector<int>>& sub_by_edge_bounds,
           const std::vector<int>& edge_type,
           const T6__& drain_small_conc_corrector, std::ostream* pstream__)  const 
{
return get_drain_by_edge(drain, conc, edge_to_drain, sub_by_edge_long,
         sub_by_edge_bounds, edge_type, drain_small_conc_corrector,
         pstream__);
}
};

template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
get_vmax_by_edge(const T0__& enzyme_arg__, const T1__& kcat_arg__,
                 const std::vector<int>& edge_to_enzyme,
                 const std::vector<int>& edge_type, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  int current_statement__ = 0; 
  const auto& enzyme = to_ref(enzyme_arg__);
  const auto& kcat = to_ref(kcat_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int N_edge;
    N_edge = std::numeric_limits<int>::min();
    
    current_statement__ = 512;
    N_edge = size(edge_to_enzyme);
    current_statement__ = 513;
    validate_non_negative_index("out", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__, -1, 1> out;
    out = Eigen::Matrix<local_scalar_t__, -1, 1>(N_edge);
    stan::math::fill(out, DUMMY_VAR__);
    
    current_statement__ = 514;
    assign(out, rep_vector(1, N_edge), "assigning variable out");
    current_statement__ = 522;
    for (int f = 1; f <= N_edge; ++f) {
      current_statement__ = 520;
      if (logical_eq(rvalue(edge_type, "edge_type", index_uni(f)), 4)) {
        current_statement__ = 518;
        assign(out,
          rvalue(kcat, "kcat",
            index_uni(rvalue(edge_to_enzyme, "edge_to_enzyme", index_uni(f)))),
          "assigning variable out", index_uni(f));
      } else {
        current_statement__ = 517;
        if (logical_neq(rvalue(edge_type, "edge_type", index_uni(f)), 2)) {
          current_statement__ = 515;
          assign(out,
            (rvalue(enzyme, "enzyme",
               index_uni(rvalue(edge_to_enzyme, "edge_to_enzyme",
                           index_uni(f)))) *
              rvalue(kcat, "kcat",
                index_uni(rvalue(edge_to_enzyme, "edge_to_enzyme",
                            index_uni(f))))),
            "assigning variable out", index_uni(f));
        } 
      }
    }
    current_statement__ = 523;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct get_vmax_by_edge_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, 1>
operator()(const T0__& enzyme, const T1__& kcat,
           const std::vector<int>& edge_to_enzyme,
           const std::vector<int>& edge_type, std::ostream* pstream__)  const 
{
return get_vmax_by_edge(enzyme, kcat, edge_to_enzyme, edge_type, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__, typename T12__,
typename T13__, typename T14__, typename T15__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>,
stan::value_type_t<T6__>, stan::value_type_t<T7__>, stan::value_type_t<T8__>,
stan::value_type_t<T9__>, stan::promote_args_t<stan::value_type_t<T10__>,
stan::value_type_t<T11__>, T12__, T13__,
stan::value_type_t<T14__>, stan::promote_args_t<stan::value_type_t<T15__>>>>>, -1, 1>
get_edge_flux(const T0__& conc_arg__, const T1__& enzyme_arg__,
              const T2__& dgr_arg__, const T3__& kcat_arg__,
              const T4__& km_arg__, const T5__& ki_arg__,
              const T6__& tc_arg__, const T7__& dt_arg__,
              const T8__& dr_arg__, const T9__& kcat_phos_arg__,
              const T10__& conc_phos_arg__, const T11__& drain_arg__,
              const T12__& temperature,
              const T13__& drain_small_conc_corrector, const T14__& S_arg__,
              const T15__& subunits_arg__, const std::vector<int>& edge_type,
              const std::vector<int>& edge_to_enzyme,
              const std::vector<int>& edge_to_tc,
              const std::vector<int>& edge_to_drain,
              const std::vector<std::vector<int>>& km_lookup,
              const std::vector<std::vector<int>>& ki_lookup,
              const std::vector<std::vector<int>>& dt_lookup,
              const std::vector<std::vector<int>>& dr_lookup,
              const std::vector<int>& sub_by_edge_long,
              const std::vector<std::vector<int>>& sub_by_edge_bounds,
              const std::vector<int>& prod_by_edge_long,
              const std::vector<std::vector<int>>& prod_by_edge_bounds,
              const std::vector<int>& ci_by_edge_long,
              const std::vector<std::vector<int>>& ci_by_edge_bounds,
              const std::vector<int>& ai_ix_long,
              const std::vector<std::vector<int>>& ai_ix_bounds,
              const std::vector<int>& aa_ix_long,
              const std::vector<std::vector<int>>& aa_ix_bounds,
              const std::vector<int>& pa_ix_long,
              const std::vector<std::vector<int>>& pa_ix_bounds,
              const std::vector<int>& pi_ix_long,
              const std::vector<std::vector<int>>& pi_ix_bounds,
              std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>,
          stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>,
          stan::value_type_t<T6__>,
          stan::value_type_t<T7__>,
          stan::value_type_t<T8__>,
          stan::value_type_t<T9__>, stan::promote_args_t<stan::value_type_t<T10__>,
          stan::value_type_t<T11__>,
          T12__,
          T13__,
          stan::value_type_t<T14__>, stan::promote_args_t<stan::value_type_t<T15__>>>>>;
  int current_statement__ = 0; 
  const auto& conc = to_ref(conc_arg__);
  const auto& enzyme = to_ref(enzyme_arg__);
  const auto& dgr = to_ref(dgr_arg__);
  const auto& kcat = to_ref(kcat_arg__);
  const auto& km = to_ref(km_arg__);
  const auto& ki = to_ref(ki_arg__);
  const auto& tc = to_ref(tc_arg__);
  const auto& dt = to_ref(dt_arg__);
  const auto& dr = to_ref(dr_arg__);
  const auto& kcat_phos = to_ref(kcat_phos_arg__);
  const auto& conc_phos = to_ref(conc_phos_arg__);
  const auto& drain = to_ref(drain_arg__);
  const auto& S = to_ref(S_arg__);
  const auto& subunits = to_ref(subunits_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int N_edge;
    N_edge = std::numeric_limits<int>::min();
    
    current_statement__ = 525;
    N_edge = cols(S);
    current_statement__ = 526;
    validate_non_negative_index("vmax", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__, -1, 1> vmax;
    vmax = Eigen::Matrix<local_scalar_t__, -1, 1>(N_edge);
    stan::math::fill(vmax, DUMMY_VAR__);
    
    current_statement__ = 527;
    assign(vmax,
      get_vmax_by_edge(enzyme, kcat, edge_to_enzyme, edge_type, pstream__),
      "assigning variable vmax");
    current_statement__ = 528;
    validate_non_negative_index("reversibility", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__, -1, 1> reversibility;
    reversibility = Eigen::Matrix<local_scalar_t__, -1, 1>(N_edge);
    stan::math::fill(reversibility, DUMMY_VAR__);
    
    current_statement__ = 529;
    assign(reversibility,
      get_reversibility(dgr, temperature, S, conc, edge_type, pstream__),
      "assigning variable reversibility");
    current_statement__ = 530;
    validate_non_negative_index("free_enzyme_ratio", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__, -1, 1> free_enzyme_ratio;
    free_enzyme_ratio = Eigen::Matrix<local_scalar_t__, -1, 1>(N_edge);
    stan::math::fill(free_enzyme_ratio, DUMMY_VAR__);
    
    current_statement__ = 531;
    assign(free_enzyme_ratio,
      get_free_enzyme_ratio(conc, S, km, ki, edge_type, km_lookup, ki_lookup,
        sub_by_edge_long, sub_by_edge_bounds, prod_by_edge_long,
        prod_by_edge_bounds, ci_by_edge_long, ci_by_edge_bounds, pstream__),
      "assigning variable free_enzyme_ratio");
    current_statement__ = 532;
    validate_non_negative_index("saturation", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__, -1, 1> saturation;
    saturation = Eigen::Matrix<local_scalar_t__, -1, 1>(N_edge);
    stan::math::fill(saturation, DUMMY_VAR__);
    
    current_statement__ = 533;
    assign(saturation,
      get_saturation(conc, km, free_enzyme_ratio, km_lookup,
        sub_by_edge_long, sub_by_edge_bounds, edge_type, pstream__),
      "assigning variable saturation");
    current_statement__ = 534;
    validate_non_negative_index("allostery", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__, -1, 1> allostery;
    allostery = Eigen::Matrix<local_scalar_t__, -1, 1>(N_edge);
    stan::math::fill(allostery, DUMMY_VAR__);
    
    current_statement__ = 535;
    assign(allostery,
      get_allostery(conc, free_enzyme_ratio, tc, dt, dr, subunits, dt_lookup,
        dr_lookup, edge_to_tc, ai_ix_long, ai_ix_bounds, aa_ix_long,
        aa_ix_bounds, pstream__), "assigning variable allostery");
    current_statement__ = 536;
    validate_non_negative_index("phosphorylation", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__, -1, 1> phosphorylation;
    phosphorylation = Eigen::Matrix<local_scalar_t__, -1, 1>(N_edge);
    stan::math::fill(phosphorylation, DUMMY_VAR__);
    
    current_statement__ = 537;
    assign(phosphorylation,
      get_phosphorylation(kcat_phos, conc_phos, pa_ix_long, pa_ix_bounds,
        pi_ix_long, pi_ix_bounds, subunits, pstream__),
      "assigning variable phosphorylation");
    current_statement__ = 538;
    validate_non_negative_index("drain_by_edge", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__, -1, 1> drain_by_edge;
    drain_by_edge = Eigen::Matrix<local_scalar_t__, -1, 1>(N_edge);
    stan::math::fill(drain_by_edge, DUMMY_VAR__);
    
    current_statement__ = 539;
    assign(drain_by_edge,
      get_drain_by_edge(drain, conc, edge_to_drain, sub_by_edge_long,
        sub_by_edge_bounds, edge_type, drain_small_conc_corrector, pstream__),
      "assigning variable drain_by_edge");
    current_statement__ = 540;
    return elt_multiply(
             elt_multiply(
               elt_multiply(
                 elt_multiply(elt_multiply(vmax, saturation), reversibility),
                 allostery), phosphorylation), drain_by_edge);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct get_edge_flux_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__, typename T12__,
typename T13__, typename T14__, typename T15__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>,
stan::value_type_t<T6__>, stan::value_type_t<T7__>, stan::value_type_t<T8__>,
stan::value_type_t<T9__>, stan::promote_args_t<stan::value_type_t<T10__>,
stan::value_type_t<T11__>, T12__, T13__,
stan::value_type_t<T14__>, stan::promote_args_t<stan::value_type_t<T15__>>>>>, -1, 1>
operator()(const T0__& conc, const T1__& enzyme, const T2__& dgr,
           const T3__& kcat, const T4__& km, const T5__& ki, const T6__& tc,
           const T7__& dt, const T8__& dr, const T9__& kcat_phos,
           const T10__& conc_phos, const T11__& drain,
           const T12__& temperature, const T13__& drain_small_conc_corrector,
           const T14__& S, const T15__& subunits,
           const std::vector<int>& edge_type,
           const std::vector<int>& edge_to_enzyme,
           const std::vector<int>& edge_to_tc,
           const std::vector<int>& edge_to_drain,
           const std::vector<std::vector<int>>& km_lookup,
           const std::vector<std::vector<int>>& ki_lookup,
           const std::vector<std::vector<int>>& dt_lookup,
           const std::vector<std::vector<int>>& dr_lookup,
           const std::vector<int>& sub_by_edge_long,
           const std::vector<std::vector<int>>& sub_by_edge_bounds,
           const std::vector<int>& prod_by_edge_long,
           const std::vector<std::vector<int>>& prod_by_edge_bounds,
           const std::vector<int>& ci_by_edge_long,
           const std::vector<std::vector<int>>& ci_by_edge_bounds,
           const std::vector<int>& ai_ix_long,
           const std::vector<std::vector<int>>& ai_ix_bounds,
           const std::vector<int>& aa_ix_long,
           const std::vector<std::vector<int>>& aa_ix_bounds,
           const std::vector<int>& pa_ix_long,
           const std::vector<std::vector<int>>& pa_ix_bounds,
           const std::vector<int>& pi_ix_long,
           const std::vector<std::vector<int>>& pi_ix_bounds,
           std::ostream* pstream__)  const 
{
return get_edge_flux(conc, enzyme, dgr, kcat, km, ki, tc, dt, dr, kcat_phos,
         conc_phos, drain, temperature, drain_small_conc_corrector, S,
         subunits, edge_type, edge_to_enzyme, edge_to_tc, edge_to_drain,
         km_lookup, ki_lookup, dt_lookup, dr_lookup, sub_by_edge_long,
         sub_by_edge_bounds, prod_by_edge_long, prod_by_edge_bounds,
         ci_by_edge_long, ci_by_edge_bounds, ai_ix_long, ai_ix_bounds,
         aa_ix_long, aa_ix_bounds, pa_ix_long, pa_ix_bounds, pi_ix_long,
         pi_ix_bounds, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T5__,
typename T6__, typename T7__, typename T8__, typename T9__, typename T10__,
typename T11__, typename T12__, typename T13__, typename T14__,
typename T15__, typename T16__, typename T17__, typename T18__,
typename T19__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T5__>,
stan::value_type_t<T6__>, stan::promote_args_t<stan::value_type_t<T7__>,
stan::value_type_t<T8__>, stan::value_type_t<T9__>,
stan::value_type_t<T10__>,
stan::value_type_t<T11__>, stan::promote_args_t<stan::value_type_t<T12__>,
stan::value_type_t<T13__>, stan::value_type_t<T14__>,
stan::value_type_t<T15__>, T16__, stan::promote_args_t<T17__,
stan::value_type_t<T18__>,
stan::value_type_t<T19__>>>>>, -1, 1>
dbalanced_dt(const T0__& time, const T1__& current_balanced_arg__,
             const T2__& unbalanced_arg__,
             const std::vector<int>& balanced_ix,
             const std::vector<int>& unbalanced_ix, const T5__& enzyme_arg__,
             const T6__& dgr_arg__, const T7__& kcat_arg__,
             const T8__& km_arg__, const T9__& ki_arg__,
             const T10__& tc_arg__, const T11__& dt_arg__,
             const T12__& dr_arg__, const T13__& kcat_phos_arg__,
             const T14__& conc_phos_arg__, const T15__& drain_arg__,
             const T16__& temperature,
             const T17__& drain_small_conc_corrector, const T18__& S_arg__,
             const T19__& subunits_arg__, const std::vector<int>& edge_type,
             const std::vector<int>& edge_to_enzyme,
             const std::vector<int>& edge_to_tc,
             const std::vector<int>& edge_to_drain,
             const std::vector<std::vector<int>>& km_lookup,
             const std::vector<std::vector<int>>& ki_lookup,
             const std::vector<std::vector<int>>& dt_lookup,
             const std::vector<std::vector<int>>& dr_lookup,
             const std::vector<int>& sub_by_edge_long,
             const std::vector<std::vector<int>>& sub_by_edge_bounds,
             const std::vector<int>& prod_by_edge_long,
             const std::vector<std::vector<int>>& prod_by_edge_bounds,
             const std::vector<int>& ci_by_edge_long,
             const std::vector<std::vector<int>>& ci_by_edge_bounds,
             const std::vector<int>& ai_ix_long,
             const std::vector<std::vector<int>>& ai_ix_bounds,
             const std::vector<int>& aa_ix_long,
             const std::vector<std::vector<int>>& aa_ix_bounds,
             const std::vector<int>& pa_ix_long,
             const std::vector<std::vector<int>>& pa_ix_bounds,
             const std::vector<int>& pi_ix_long,
             const std::vector<std::vector<int>>& pi_ix_bounds,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T5__>,
          stan::value_type_t<T6__>, stan::promote_args_t<stan::value_type_t<T7__>,
          stan::value_type_t<T8__>,
          stan::value_type_t<T9__>,
          stan::value_type_t<T10__>,
          stan::value_type_t<T11__>, stan::promote_args_t<stan::value_type_t<T12__>,
          stan::value_type_t<T13__>,
          stan::value_type_t<T14__>,
          stan::value_type_t<T15__>,
          T16__, stan::promote_args_t<T17__,
          stan::value_type_t<T18__>,
          stan::value_type_t<T19__>>>>>;
  int current_statement__ = 0; 
  const auto& current_balanced = to_ref(current_balanced_arg__);
  const auto& unbalanced = to_ref(unbalanced_arg__);
  const auto& enzyme = to_ref(enzyme_arg__);
  const auto& dgr = to_ref(dgr_arg__);
  const auto& kcat = to_ref(kcat_arg__);
  const auto& km = to_ref(km_arg__);
  const auto& ki = to_ref(ki_arg__);
  const auto& tc = to_ref(tc_arg__);
  const auto& dt = to_ref(dt_arg__);
  const auto& dr = to_ref(dr_arg__);
  const auto& kcat_phos = to_ref(kcat_phos_arg__);
  const auto& conc_phos = to_ref(conc_phos_arg__);
  const auto& drain = to_ref(drain_arg__);
  const auto& S = to_ref(S_arg__);
  const auto& subunits = to_ref(subunits_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 542;
    validate_non_negative_index("current_concentration",
                                "rows(current_balanced) + rows(unbalanced)",
                                (rows(current_balanced) + rows(unbalanced)));
    Eigen::Matrix<local_scalar_t__, -1, 1> current_concentration;
    current_concentration = Eigen::Matrix<local_scalar_t__, -1, 1>((rows(
                                                                    current_balanced)
                                                                    +
                                                                    rows(
                                                                    unbalanced)));
    stan::math::fill(current_concentration, DUMMY_VAR__);
    
    current_statement__ = 544;
    assign(current_concentration, current_balanced,
      "assigning variable current_concentration", index_multi(balanced_ix));
    current_statement__ = 545;
    assign(current_concentration, unbalanced,
      "assigning variable current_concentration", index_multi(unbalanced_ix));
    current_statement__ = 546;
    validate_non_negative_index("edge_flux", "cols(S)", cols(S));
    Eigen::Matrix<local_scalar_t__, -1, 1> edge_flux;
    edge_flux = Eigen::Matrix<local_scalar_t__, -1, 1>(cols(S));
    stan::math::fill(edge_flux, DUMMY_VAR__);
    
    current_statement__ = 547;
    assign(edge_flux,
      get_edge_flux(current_concentration, enzyme, dgr, kcat, km, ki, tc, dt,
        dr, kcat_phos, conc_phos, drain, temperature,
        drain_small_conc_corrector, S, subunits, edge_type, edge_to_enzyme,
        edge_to_tc, edge_to_drain, km_lookup, ki_lookup, dt_lookup,
        dr_lookup, sub_by_edge_long, sub_by_edge_bounds, prod_by_edge_long,
        prod_by_edge_bounds, ci_by_edge_long, ci_by_edge_bounds, ai_ix_long,
        ai_ix_bounds, aa_ix_long, aa_ix_bounds, pa_ix_long, pa_ix_bounds,
        pi_ix_long, pi_ix_bounds, pstream__), "assigning variable edge_flux");
    current_statement__ = 548;
    return rvalue(multiply(S, edge_flux), "(S * edge_flux)",
             index_multi(balanced_ix));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct dbalanced_dt_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T5__,
typename T6__, typename T7__, typename T8__, typename T9__, typename T10__,
typename T11__, typename T12__, typename T13__, typename T14__,
typename T15__, typename T16__, typename T17__, typename T18__,
typename T19__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T5__>,
stan::value_type_t<T6__>, stan::promote_args_t<stan::value_type_t<T7__>,
stan::value_type_t<T8__>, stan::value_type_t<T9__>,
stan::value_type_t<T10__>,
stan::value_type_t<T11__>, stan::promote_args_t<stan::value_type_t<T12__>,
stan::value_type_t<T13__>, stan::value_type_t<T14__>,
stan::value_type_t<T15__>, T16__, stan::promote_args_t<T17__,
stan::value_type_t<T18__>,
stan::value_type_t<T19__>>>>>, -1, 1>
operator()(const T0__& time, const T1__& current_balanced,
           const T2__& unbalanced, const std::vector<int>& balanced_ix,
           const std::vector<int>& unbalanced_ix, const T5__& enzyme,
           const T6__& dgr, const T7__& kcat, const T8__& km, const T9__& ki,
           const T10__& tc, const T11__& dt, const T12__& dr,
           const T13__& kcat_phos, const T14__& conc_phos,
           const T15__& drain, const T16__& temperature,
           const T17__& drain_small_conc_corrector, const T18__& S,
           const T19__& subunits, const std::vector<int>& edge_type,
           const std::vector<int>& edge_to_enzyme,
           const std::vector<int>& edge_to_tc,
           const std::vector<int>& edge_to_drain,
           const std::vector<std::vector<int>>& km_lookup,
           const std::vector<std::vector<int>>& ki_lookup,
           const std::vector<std::vector<int>>& dt_lookup,
           const std::vector<std::vector<int>>& dr_lookup,
           const std::vector<int>& sub_by_edge_long,
           const std::vector<std::vector<int>>& sub_by_edge_bounds,
           const std::vector<int>& prod_by_edge_long,
           const std::vector<std::vector<int>>& prod_by_edge_bounds,
           const std::vector<int>& ci_by_edge_long,
           const std::vector<std::vector<int>>& ci_by_edge_bounds,
           const std::vector<int>& ai_ix_long,
           const std::vector<std::vector<int>>& ai_ix_bounds,
           const std::vector<int>& aa_ix_long,
           const std::vector<std::vector<int>>& aa_ix_bounds,
           const std::vector<int>& pa_ix_long,
           const std::vector<std::vector<int>>& pa_ix_bounds,
           const std::vector<int>& pi_ix_long,
           const std::vector<std::vector<int>>& pi_ix_bounds,
           std::ostream* pstream__)  const 
{
return dbalanced_dt(time, current_balanced, unbalanced, balanced_ix,
         unbalanced_ix, enzyme, dgr, kcat, km, ki, tc, dt, dr, kcat_phos,
         conc_phos, drain, temperature, drain_small_conc_corrector, S,
         subunits, edge_type, edge_to_enzyme, edge_to_tc, edge_to_drain,
         km_lookup, ki_lookup, dt_lookup, dr_lookup, sub_by_edge_long,
         sub_by_edge_bounds, prod_by_edge_long, prod_by_edge_bounds,
         ci_by_edge_long, ci_by_edge_bounds, ai_ix_long, ai_ix_bounds,
         aa_ix_long, aa_ix_bounds, pa_ix_long, pa_ix_bounds, pi_ix_long,
         pi_ix_bounds, pstream__);
}
};


struct dbalanced_dt_odefunctor__ {
template <typename T0__, typename T1__, typename T2__, typename T5__,
typename T6__, typename T7__, typename T8__, typename T9__, typename T10__,
typename T11__, typename T12__, typename T13__, typename T14__,
typename T15__, typename T16__, typename T17__, typename T18__,
typename T19__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T5__>,
stan::value_type_t<T6__>, stan::promote_args_t<stan::value_type_t<T7__>,
stan::value_type_t<T8__>, stan::value_type_t<T9__>,
stan::value_type_t<T10__>,
stan::value_type_t<T11__>, stan::promote_args_t<stan::value_type_t<T12__>,
stan::value_type_t<T13__>, stan::value_type_t<T14__>,
stan::value_type_t<T15__>, T16__, stan::promote_args_t<T17__,
stan::value_type_t<T18__>,
stan::value_type_t<T19__>>>>>, -1, 1>
operator()(const T0__& time, const T1__& current_balanced,
           std::ostream* pstream__, const T2__& unbalanced,
           const std::vector<int>& balanced_ix,
           const std::vector<int>& unbalanced_ix, const T5__& enzyme,
           const T6__& dgr, const T7__& kcat, const T8__& km, const T9__& ki,
           const T10__& tc, const T11__& dt, const T12__& dr,
           const T13__& kcat_phos, const T14__& conc_phos,
           const T15__& drain, const T16__& temperature,
           const T17__& drain_small_conc_corrector, const T18__& S,
           const T19__& subunits, const std::vector<int>& edge_type,
           const std::vector<int>& edge_to_enzyme,
           const std::vector<int>& edge_to_tc,
           const std::vector<int>& edge_to_drain,
           const std::vector<std::vector<int>>& km_lookup,
           const std::vector<std::vector<int>>& ki_lookup,
           const std::vector<std::vector<int>>& dt_lookup,
           const std::vector<std::vector<int>>& dr_lookup,
           const std::vector<int>& sub_by_edge_long,
           const std::vector<std::vector<int>>& sub_by_edge_bounds,
           const std::vector<int>& prod_by_edge_long,
           const std::vector<std::vector<int>>& prod_by_edge_bounds,
           const std::vector<int>& ci_by_edge_long,
           const std::vector<std::vector<int>>& ci_by_edge_bounds,
           const std::vector<int>& ai_ix_long,
           const std::vector<std::vector<int>>& ai_ix_bounds,
           const std::vector<int>& aa_ix_long,
           const std::vector<std::vector<int>>& aa_ix_bounds,
           const std::vector<int>& pa_ix_long,
           const std::vector<std::vector<int>>& pa_ix_bounds,
           const std::vector<int>& pi_ix_long,
           const std::vector<std::vector<int>>& pi_ix_bounds)  const 
{
return dbalanced_dt(time, current_balanced, unbalanced, balanced_ix,
         unbalanced_ix, enzyme, dgr, kcat, km, ki, tc, dt, dr, kcat_phos,
         conc_phos, drain, temperature, drain_small_conc_corrector, S,
         subunits, edge_type, edge_to_enzyme, edge_to_tc, edge_to_drain,
         km_lookup, ki_lookup, dt_lookup, dr_lookup, sub_by_edge_long,
         sub_by_edge_bounds, prod_by_edge_long, prod_by_edge_bounds,
         ci_by_edge_long, ci_by_edge_bounds, ai_ix_long, ai_ix_bounds,
         aa_ix_long, aa_ix_bounds, pa_ix_long, pa_ix_bounds, pi_ix_long,
         pi_ix_bounds, pstream__);
}
};

class model_model final : public model_base_crtp<model_model> {

 private:
  int N_mic;
  int N_edge_sub;
  int N_edge_prod;
  int N_unbalanced;
  int N_metabolite;
  int N_km;
  int N_reaction;
  int N_enzyme;
  int N_drain;
  int N_edge;
  int N_phosphorylation_enzymes;
  int N_experiment;
  int N_flux_measurement;
  int N_enzyme_measurement;
  int N_conc_measurement;
  int N_ci;
  int N_ai;
  int N_aa;
  int N_ae;
  int N_pa;
  int N_pi;
  std::vector<int> unbalanced_mic_ix;
  std::vector<int> balanced_mic_ix;
  std::vector<int> experiment_yconc;
  std::vector<int> mic_ix_yconc;
  std::vector<double> yconc;
  Eigen::Matrix<double, -1, 1> sigma_conc__;
  std::vector<int> experiment_yflux;
  std::vector<int> reaction_yflux;
  std::vector<double> yflux;
  Eigen::Matrix<double, -1, 1> sigma_flux__;
  std::vector<int> experiment_yenz;
  std::vector<int> enzyme_yenz;
  std::vector<double> yenz;
  Eigen::Matrix<double, -1, 1> sigma_enz__;
  Eigen::Matrix<double, -1, 1> prior_loc_dgf__;
  Eigen::Matrix<double, -1, -1> prior_cov_dgf__;
  std::vector<Eigen::Matrix<double, -1, 1>> priors_kcat;
  std::vector<Eigen::Matrix<double, -1, 1>> priors_km;
  std::vector<Eigen::Matrix<double, -1, 1>> priors_ki;
  std::vector<Eigen::Matrix<double, -1, 1>> priors_diss_t;
  std::vector<Eigen::Matrix<double, -1, 1>> priors_diss_r;
  std::vector<Eigen::Matrix<double, -1, 1>> priors_transfer_constant;
  std::vector<Eigen::Matrix<double, -1, 1>> priors_kcat_phos;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> priors_conc_phos;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> priors_conc_unbalanced;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> priors_conc_enzyme;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> priors_drain;
  Eigen::Matrix<double, -1, -1> S__;
  std::vector<int> edge_type;
  std::vector<int> edge_to_enzyme;
  std::vector<int> edge_to_tc;
  std::vector<int> edge_to_drain;
  std::vector<int> edge_to_reaction;
  std::vector<std::vector<int>> km_lookup;
  std::vector<std::vector<int>> ki_lookup;
  std::vector<std::vector<int>> dt_lookup;
  std::vector<std::vector<int>> dr_lookup;
  std::vector<int> sub_by_edge_long;
  std::vector<std::vector<int>> sub_by_edge_bounds;
  std::vector<int> prod_by_edge_long;
  std::vector<std::vector<int>> prod_by_edge_bounds;
  std::vector<int> ci_by_edge_long;
  std::vector<std::vector<int>> ci_by_edge_bounds;
  std::vector<int> ai_ix_long;
  std::vector<std::vector<int>> ai_ix_bounds;
  std::vector<int> aa_ix_long;
  std::vector<std::vector<int>> aa_ix_bounds;
  std::vector<int> pa_ix_long;
  std::vector<std::vector<int>> pa_ix_bounds;
  std::vector<int> pi_ix_long;
  std::vector<std::vector<int>> pi_ix_bounds;
  std::vector<int> mic_to_met;
  Eigen::Matrix<double, -1, 1> water_stoichiometry__;
  Eigen::Matrix<double, -1, 1> transported_charge__;
  Eigen::Matrix<double, -1, -1> is_knockout__;
  Eigen::Matrix<double, -1, -1> is_phos_knockout__;
  Eigen::Matrix<double, -1, 1> subunits__;
  std::vector<Eigen::Matrix<double, -1, 1>> priors_psi;
  Eigen::Matrix<double, -1, 1> temperature__;
  std::vector<Eigen::Matrix<double, -1, 1>> conc_init;
  double rel_tol;
  double abs_tol;
  double steady_state_threshold_abs;
  double steady_state_threshold_rel;
  int max_num_steps;
  double drain_small_conc_corrector;
  int LIKELIHOOD;
  double timepoint;
  int reject_non_steady;
  double initial_time;
  Eigen::Matrix<double, -1, -1> knockout__;
  Eigen::Matrix<double, -1, -1> phos_knockout__;
  Eigen::Matrix<double, -1, -1> prior_cov_dgf_chol__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> sigma_conc{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> sigma_flux{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> sigma_enz{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> prior_loc_dgf{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> prior_cov_dgf{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> S{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> water_stoichiometry{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> transported_charge{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> is_knockout{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> is_phos_knockout{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> subunits{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> temperature{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> knockout{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> phos_knockout{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> prior_cov_dgf_chol{nullptr, 0, 0};
 
 public:
  ~model_model() { }
  
  inline std::string model_name() const final { return "model_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.28.1", "stancflags = --include-paths=/home/georg/git/maud.git/HC-acetate/src/maud"};
  }
  
  
  model_model(stan::io::var_context& context__,
              unsigned int random_seed__ = 0,
              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "model_model_namespace::model_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 114;
      context__.validate_dims("data initialization","N_mic","int",
           std::vector<size_t>{});
      N_mic = std::numeric_limits<int>::min();
      
      current_statement__ = 114;
      N_mic = context__.vals_i("N_mic")[(1 - 1)];
      current_statement__ = 114;
      check_greater_or_equal(function__, "N_mic", N_mic, 1);
      current_statement__ = 115;
      context__.validate_dims("data initialization","N_edge_sub","int",
           std::vector<size_t>{});
      N_edge_sub = std::numeric_limits<int>::min();
      
      current_statement__ = 115;
      N_edge_sub = context__.vals_i("N_edge_sub")[(1 - 1)];
      current_statement__ = 115;
      check_greater_or_equal(function__, "N_edge_sub", N_edge_sub, 1);
      current_statement__ = 116;
      context__.validate_dims("data initialization","N_edge_prod","int",
           std::vector<size_t>{});
      N_edge_prod = std::numeric_limits<int>::min();
      
      current_statement__ = 116;
      N_edge_prod = context__.vals_i("N_edge_prod")[(1 - 1)];
      current_statement__ = 116;
      check_greater_or_equal(function__, "N_edge_prod", N_edge_prod, 1);
      current_statement__ = 117;
      context__.validate_dims("data initialization","N_unbalanced","int",
           std::vector<size_t>{});
      N_unbalanced = std::numeric_limits<int>::min();
      
      current_statement__ = 117;
      N_unbalanced = context__.vals_i("N_unbalanced")[(1 - 1)];
      current_statement__ = 117;
      check_greater_or_equal(function__, "N_unbalanced", N_unbalanced, 1);
      current_statement__ = 118;
      context__.validate_dims("data initialization","N_metabolite","int",
           std::vector<size_t>{});
      N_metabolite = std::numeric_limits<int>::min();
      
      current_statement__ = 118;
      N_metabolite = context__.vals_i("N_metabolite")[(1 - 1)];
      current_statement__ = 118;
      check_greater_or_equal(function__, "N_metabolite", N_metabolite, 1);
      current_statement__ = 119;
      context__.validate_dims("data initialization","N_km","int",
           std::vector<size_t>{});
      N_km = std::numeric_limits<int>::min();
      
      current_statement__ = 119;
      N_km = context__.vals_i("N_km")[(1 - 1)];
      current_statement__ = 119;
      check_greater_or_equal(function__, "N_km", N_km, 1);
      current_statement__ = 120;
      context__.validate_dims("data initialization","N_reaction","int",
           std::vector<size_t>{});
      N_reaction = std::numeric_limits<int>::min();
      
      current_statement__ = 120;
      N_reaction = context__.vals_i("N_reaction")[(1 - 1)];
      current_statement__ = 120;
      check_greater_or_equal(function__, "N_reaction", N_reaction, 1);
      current_statement__ = 121;
      context__.validate_dims("data initialization","N_enzyme","int",
           std::vector<size_t>{});
      N_enzyme = std::numeric_limits<int>::min();
      
      current_statement__ = 121;
      N_enzyme = context__.vals_i("N_enzyme")[(1 - 1)];
      current_statement__ = 121;
      check_greater_or_equal(function__, "N_enzyme", N_enzyme, 1);
      current_statement__ = 122;
      context__.validate_dims("data initialization","N_drain","int",
           std::vector<size_t>{});
      N_drain = std::numeric_limits<int>::min();
      
      current_statement__ = 122;
      N_drain = context__.vals_i("N_drain")[(1 - 1)];
      current_statement__ = 122;
      check_greater_or_equal(function__, "N_drain", N_drain, 0);
      current_statement__ = 123;
      context__.validate_dims("data initialization","N_edge","int",
           std::vector<size_t>{});
      N_edge = std::numeric_limits<int>::min();
      
      current_statement__ = 123;
      N_edge = context__.vals_i("N_edge")[(1 - 1)];
      current_statement__ = 123;
      check_greater_or_equal(function__, "N_edge", N_edge, 1);
      current_statement__ = 124;
      context__.validate_dims("data initialization",
          "N_phosphorylation_enzymes","int", std::vector<size_t>{});
      N_phosphorylation_enzymes = std::numeric_limits<int>::min();
      
      current_statement__ = 124;
      N_phosphorylation_enzymes = context__.vals_i("N_phosphorylation_enzymes")[
          (1 - 1)];
      current_statement__ = 124;
      check_greater_or_equal(function__, "N_phosphorylation_enzymes",
                             N_phosphorylation_enzymes, 0);
      current_statement__ = 125;
      context__.validate_dims("data initialization","N_experiment","int",
           std::vector<size_t>{});
      N_experiment = std::numeric_limits<int>::min();
      
      current_statement__ = 125;
      N_experiment = context__.vals_i("N_experiment")[(1 - 1)];
      current_statement__ = 125;
      check_greater_or_equal(function__, "N_experiment", N_experiment, 1);
      current_statement__ = 126;
      context__.validate_dims("data initialization","N_flux_measurement",
          "int", std::vector<size_t>{});
      N_flux_measurement = std::numeric_limits<int>::min();
      
      current_statement__ = 126;
      N_flux_measurement = context__.vals_i("N_flux_measurement")[(1 - 1)];
      current_statement__ = 126;
      check_greater_or_equal(function__, "N_flux_measurement",
                             N_flux_measurement, 1);
      current_statement__ = 127;
      context__.validate_dims("data initialization","N_enzyme_measurement",
          "int", std::vector<size_t>{});
      N_enzyme_measurement = std::numeric_limits<int>::min();
      
      current_statement__ = 127;
      N_enzyme_measurement = context__.vals_i("N_enzyme_measurement")[
          (1 - 1)];
      current_statement__ = 127;
      check_greater_or_equal(function__, "N_enzyme_measurement",
                             N_enzyme_measurement, 0);
      current_statement__ = 128;
      context__.validate_dims("data initialization","N_conc_measurement",
          "int", std::vector<size_t>{});
      N_conc_measurement = std::numeric_limits<int>::min();
      
      current_statement__ = 128;
      N_conc_measurement = context__.vals_i("N_conc_measurement")[(1 - 1)];
      current_statement__ = 128;
      check_greater_or_equal(function__, "N_conc_measurement",
                             N_conc_measurement, 1);
      current_statement__ = 129;
      context__.validate_dims("data initialization","N_ci","int",
           std::vector<size_t>{});
      N_ci = std::numeric_limits<int>::min();
      
      current_statement__ = 129;
      N_ci = context__.vals_i("N_ci")[(1 - 1)];
      current_statement__ = 129;
      check_greater_or_equal(function__, "N_ci", N_ci, 0);
      current_statement__ = 130;
      context__.validate_dims("data initialization","N_ai","int",
           std::vector<size_t>{});
      N_ai = std::numeric_limits<int>::min();
      
      current_statement__ = 130;
      N_ai = context__.vals_i("N_ai")[(1 - 1)];
      current_statement__ = 130;
      check_greater_or_equal(function__, "N_ai", N_ai, 0);
      current_statement__ = 131;
      context__.validate_dims("data initialization","N_aa","int",
           std::vector<size_t>{});
      N_aa = std::numeric_limits<int>::min();
      
      current_statement__ = 131;
      N_aa = context__.vals_i("N_aa")[(1 - 1)];
      current_statement__ = 131;
      check_greater_or_equal(function__, "N_aa", N_aa, 0);
      current_statement__ = 132;
      context__.validate_dims("data initialization","N_ae","int",
           std::vector<size_t>{});
      N_ae = std::numeric_limits<int>::min();
      
      current_statement__ = 132;
      N_ae = context__.vals_i("N_ae")[(1 - 1)];
      current_statement__ = 132;
      check_greater_or_equal(function__, "N_ae", N_ae, 0);
      current_statement__ = 133;
      context__.validate_dims("data initialization","N_pa","int",
           std::vector<size_t>{});
      N_pa = std::numeric_limits<int>::min();
      
      current_statement__ = 133;
      N_pa = context__.vals_i("N_pa")[(1 - 1)];
      current_statement__ = 133;
      check_greater_or_equal(function__, "N_pa", N_pa, 0);
      current_statement__ = 134;
      context__.validate_dims("data initialization","N_pi","int",
           std::vector<size_t>{});
      N_pi = std::numeric_limits<int>::min();
      
      current_statement__ = 134;
      N_pi = context__.vals_i("N_pi")[(1 - 1)];
      current_statement__ = 134;
      check_greater_or_equal(function__, "N_pi", N_pi, 0);
      current_statement__ = 135;
      validate_non_negative_index("unbalanced_mic_ix", "N_unbalanced",
                                  N_unbalanced);
      current_statement__ = 136;
      context__.validate_dims("data initialization","unbalanced_mic_ix",
          "int", std::vector<size_t>{static_cast<size_t>(N_unbalanced)});
      unbalanced_mic_ix = std::vector<int>(N_unbalanced, std::numeric_limits<int>::min());
      
      
      current_statement__ = 136;
      unbalanced_mic_ix = context__.vals_i("unbalanced_mic_ix");
      current_statement__ = 136;
      for (int sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
        current_statement__ = 136;
        check_greater_or_equal(function__, "unbalanced_mic_ix[sym1__]",
                               unbalanced_mic_ix[(sym1__ - 1)], 1);
      }
      current_statement__ = 136;
      for (int sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
        current_statement__ = 136;
        check_less_or_equal(function__, "unbalanced_mic_ix[sym1__]",
                            unbalanced_mic_ix[(sym1__ - 1)], N_mic);
      }
      current_statement__ = 137;
      validate_non_negative_index("balanced_mic_ix", "N_mic - N_unbalanced",
                                  (N_mic - N_unbalanced));
      current_statement__ = 138;
      context__.validate_dims("data initialization","balanced_mic_ix","int",
           std::vector<size_t>{static_cast<size_t>((N_mic - N_unbalanced))});
      balanced_mic_ix = std::vector<int>((N_mic - N_unbalanced), std::numeric_limits<int>::min());
      
      
      current_statement__ = 138;
      balanced_mic_ix = context__.vals_i("balanced_mic_ix");
      current_statement__ = 138;
      for (int sym1__ = 1; sym1__ <= (N_mic - N_unbalanced); ++sym1__) {
        current_statement__ = 138;
        check_greater_or_equal(function__, "balanced_mic_ix[sym1__]",
                               balanced_mic_ix[(sym1__ - 1)], 1);
      }
      current_statement__ = 138;
      for (int sym1__ = 1; sym1__ <= (N_mic - N_unbalanced); ++sym1__) {
        current_statement__ = 138;
        check_less_or_equal(function__, "balanced_mic_ix[sym1__]",
                            balanced_mic_ix[(sym1__ - 1)], N_mic);
      }
      current_statement__ = 139;
      validate_non_negative_index("experiment_yconc", "N_conc_measurement",
                                  N_conc_measurement);
      current_statement__ = 140;
      context__.validate_dims("data initialization","experiment_yconc","int",
           std::vector<size_t>{static_cast<size_t>(N_conc_measurement)});
      experiment_yconc = std::vector<int>(N_conc_measurement, std::numeric_limits<int>::min());
      
      
      current_statement__ = 140;
      experiment_yconc = context__.vals_i("experiment_yconc");
      current_statement__ = 140;
      for (int sym1__ = 1; sym1__ <= N_conc_measurement; ++sym1__) {
        current_statement__ = 140;
        check_greater_or_equal(function__, "experiment_yconc[sym1__]",
                               experiment_yconc[(sym1__ - 1)], 1);
      }
      current_statement__ = 140;
      for (int sym1__ = 1; sym1__ <= N_conc_measurement; ++sym1__) {
        current_statement__ = 140;
        check_less_or_equal(function__, "experiment_yconc[sym1__]",
                            experiment_yconc[(sym1__ - 1)], N_experiment);
      }
      current_statement__ = 141;
      validate_non_negative_index("mic_ix_yconc", "N_conc_measurement",
                                  N_conc_measurement);
      current_statement__ = 142;
      context__.validate_dims("data initialization","mic_ix_yconc","int",
           std::vector<size_t>{static_cast<size_t>(N_conc_measurement)});
      mic_ix_yconc = std::vector<int>(N_conc_measurement, std::numeric_limits<int>::min());
      
      
      current_statement__ = 142;
      mic_ix_yconc = context__.vals_i("mic_ix_yconc");
      current_statement__ = 142;
      for (int sym1__ = 1; sym1__ <= N_conc_measurement; ++sym1__) {
        current_statement__ = 142;
        check_greater_or_equal(function__, "mic_ix_yconc[sym1__]",
                               mic_ix_yconc[(sym1__ - 1)], 1);
      }
      current_statement__ = 142;
      for (int sym1__ = 1; sym1__ <= N_conc_measurement; ++sym1__) {
        current_statement__ = 142;
        check_less_or_equal(function__, "mic_ix_yconc[sym1__]",
                            mic_ix_yconc[(sym1__ - 1)], N_mic);
      }
      current_statement__ = 143;
      validate_non_negative_index("yconc", "N_conc_measurement",
                                  N_conc_measurement);
      current_statement__ = 144;
      context__.validate_dims("data initialization","yconc","double",
           std::vector<size_t>{static_cast<size_t>(N_conc_measurement)});
      yconc = std::vector<double>(N_conc_measurement, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 144;
      yconc = context__.vals_r("yconc");
      current_statement__ = 145;
      validate_non_negative_index("sigma_conc", "N_conc_measurement",
                                  N_conc_measurement);
      current_statement__ = 146;
      context__.validate_dims("data initialization","sigma_conc","double",
           std::vector<size_t>{static_cast<size_t>(N_conc_measurement)});
      sigma_conc__ = Eigen::Matrix<double, -1, 1>(N_conc_measurement);
      new (&sigma_conc) Eigen::Map<Eigen::Matrix<double, -1, 1>>(sigma_conc__.data(), N_conc_measurement);
      
      
      {
        std::vector<local_scalar_t__> sigma_conc_flat__;
        current_statement__ = 146;
        sigma_conc_flat__ = context__.vals_r("sigma_conc");
        current_statement__ = 146;
        pos__ = 1;
        current_statement__ = 146;
        for (int sym1__ = 1; sym1__ <= N_conc_measurement; ++sym1__) {
          current_statement__ = 146;
          assign(sigma_conc, sigma_conc_flat__[(pos__ - 1)],
            "assigning variable sigma_conc", index_uni(sym1__));
          current_statement__ = 146;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 146;
      for (int sym1__ = 1; sym1__ <= N_conc_measurement; ++sym1__) {
        current_statement__ = 146;
        check_greater_or_equal(function__, "sigma_conc[sym1__]",
                               sigma_conc[(sym1__ - 1)], 0);
      }
      current_statement__ = 147;
      validate_non_negative_index("experiment_yflux", "N_flux_measurement",
                                  N_flux_measurement);
      current_statement__ = 148;
      context__.validate_dims("data initialization","experiment_yflux","int",
           std::vector<size_t>{static_cast<size_t>(N_flux_measurement)});
      experiment_yflux = std::vector<int>(N_flux_measurement, std::numeric_limits<int>::min());
      
      
      current_statement__ = 148;
      experiment_yflux = context__.vals_i("experiment_yflux");
      current_statement__ = 148;
      for (int sym1__ = 1; sym1__ <= N_flux_measurement; ++sym1__) {
        current_statement__ = 148;
        check_greater_or_equal(function__, "experiment_yflux[sym1__]",
                               experiment_yflux[(sym1__ - 1)], 1);
      }
      current_statement__ = 148;
      for (int sym1__ = 1; sym1__ <= N_flux_measurement; ++sym1__) {
        current_statement__ = 148;
        check_less_or_equal(function__, "experiment_yflux[sym1__]",
                            experiment_yflux[(sym1__ - 1)], N_experiment);
      }
      current_statement__ = 149;
      validate_non_negative_index("reaction_yflux", "N_flux_measurement",
                                  N_flux_measurement);
      current_statement__ = 150;
      context__.validate_dims("data initialization","reaction_yflux","int",
           std::vector<size_t>{static_cast<size_t>(N_flux_measurement)});
      reaction_yflux = std::vector<int>(N_flux_measurement, std::numeric_limits<int>::min());
      
      
      current_statement__ = 150;
      reaction_yflux = context__.vals_i("reaction_yflux");
      current_statement__ = 150;
      for (int sym1__ = 1; sym1__ <= N_flux_measurement; ++sym1__) {
        current_statement__ = 150;
        check_greater_or_equal(function__, "reaction_yflux[sym1__]",
                               reaction_yflux[(sym1__ - 1)], 1);
      }
      current_statement__ = 150;
      for (int sym1__ = 1; sym1__ <= N_flux_measurement; ++sym1__) {
        current_statement__ = 150;
        check_less_or_equal(function__, "reaction_yflux[sym1__]",
                            reaction_yflux[(sym1__ - 1)], N_reaction);
      }
      current_statement__ = 151;
      validate_non_negative_index("yflux", "N_flux_measurement",
                                  N_flux_measurement);
      current_statement__ = 152;
      context__.validate_dims("data initialization","yflux","double",
           std::vector<size_t>{static_cast<size_t>(N_flux_measurement)});
      yflux = std::vector<double>(N_flux_measurement, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 152;
      yflux = context__.vals_r("yflux");
      current_statement__ = 153;
      validate_non_negative_index("sigma_flux", "N_flux_measurement",
                                  N_flux_measurement);
      current_statement__ = 154;
      context__.validate_dims("data initialization","sigma_flux","double",
           std::vector<size_t>{static_cast<size_t>(N_flux_measurement)});
      sigma_flux__ = Eigen::Matrix<double, -1, 1>(N_flux_measurement);
      new (&sigma_flux) Eigen::Map<Eigen::Matrix<double, -1, 1>>(sigma_flux__.data(), N_flux_measurement);
      
      
      {
        std::vector<local_scalar_t__> sigma_flux_flat__;
        current_statement__ = 154;
        sigma_flux_flat__ = context__.vals_r("sigma_flux");
        current_statement__ = 154;
        pos__ = 1;
        current_statement__ = 154;
        for (int sym1__ = 1; sym1__ <= N_flux_measurement; ++sym1__) {
          current_statement__ = 154;
          assign(sigma_flux, sigma_flux_flat__[(pos__ - 1)],
            "assigning variable sigma_flux", index_uni(sym1__));
          current_statement__ = 154;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 154;
      for (int sym1__ = 1; sym1__ <= N_flux_measurement; ++sym1__) {
        current_statement__ = 154;
        check_greater_or_equal(function__, "sigma_flux[sym1__]",
                               sigma_flux[(sym1__ - 1)], 0);
      }
      current_statement__ = 155;
      validate_non_negative_index("experiment_yenz", "N_enzyme_measurement",
                                  N_enzyme_measurement);
      current_statement__ = 156;
      context__.validate_dims("data initialization","experiment_yenz","int",
           std::vector<size_t>{static_cast<size_t>(N_enzyme_measurement)});
      experiment_yenz = std::vector<int>(N_enzyme_measurement, std::numeric_limits<int>::min());
      
      
      current_statement__ = 156;
      experiment_yenz = context__.vals_i("experiment_yenz");
      current_statement__ = 156;
      for (int sym1__ = 1; sym1__ <= N_enzyme_measurement; ++sym1__) {
        current_statement__ = 156;
        check_greater_or_equal(function__, "experiment_yenz[sym1__]",
                               experiment_yenz[(sym1__ - 1)], 0);
      }
      current_statement__ = 156;
      for (int sym1__ = 1; sym1__ <= N_enzyme_measurement; ++sym1__) {
        current_statement__ = 156;
        check_less_or_equal(function__, "experiment_yenz[sym1__]",
                            experiment_yenz[(sym1__ - 1)], N_experiment);
      }
      current_statement__ = 157;
      validate_non_negative_index("enzyme_yenz", "N_enzyme_measurement",
                                  N_enzyme_measurement);
      current_statement__ = 158;
      context__.validate_dims("data initialization","enzyme_yenz","int",
           std::vector<size_t>{static_cast<size_t>(N_enzyme_measurement)});
      enzyme_yenz = std::vector<int>(N_enzyme_measurement, std::numeric_limits<int>::min());
      
      
      current_statement__ = 158;
      enzyme_yenz = context__.vals_i("enzyme_yenz");
      current_statement__ = 158;
      for (int sym1__ = 1; sym1__ <= N_enzyme_measurement; ++sym1__) {
        current_statement__ = 158;
        check_greater_or_equal(function__, "enzyme_yenz[sym1__]",
                               enzyme_yenz[(sym1__ - 1)], 0);
      }
      current_statement__ = 158;
      for (int sym1__ = 1; sym1__ <= N_enzyme_measurement; ++sym1__) {
        current_statement__ = 158;
        check_less_or_equal(function__, "enzyme_yenz[sym1__]",
                            enzyme_yenz[(sym1__ - 1)], N_enzyme);
      }
      current_statement__ = 159;
      validate_non_negative_index("yenz", "N_enzyme_measurement",
                                  N_enzyme_measurement);
      current_statement__ = 160;
      context__.validate_dims("data initialization","yenz","double",
           std::vector<size_t>{static_cast<size_t>(N_enzyme_measurement)});
      yenz = std::vector<double>(N_enzyme_measurement, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 160;
      yenz = context__.vals_r("yenz");
      current_statement__ = 161;
      validate_non_negative_index("sigma_enz", "N_enzyme_measurement",
                                  N_enzyme_measurement);
      current_statement__ = 162;
      context__.validate_dims("data initialization","sigma_enz","double",
           std::vector<size_t>{static_cast<size_t>(N_enzyme_measurement)});
      sigma_enz__ = Eigen::Matrix<double, -1, 1>(N_enzyme_measurement);
      new (&sigma_enz) Eigen::Map<Eigen::Matrix<double, -1, 1>>(sigma_enz__.data(), N_enzyme_measurement);
      
      
      {
        std::vector<local_scalar_t__> sigma_enz_flat__;
        current_statement__ = 162;
        sigma_enz_flat__ = context__.vals_r("sigma_enz");
        current_statement__ = 162;
        pos__ = 1;
        current_statement__ = 162;
        for (int sym1__ = 1; sym1__ <= N_enzyme_measurement; ++sym1__) {
          current_statement__ = 162;
          assign(sigma_enz, sigma_enz_flat__[(pos__ - 1)],
            "assigning variable sigma_enz", index_uni(sym1__));
          current_statement__ = 162;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 162;
      for (int sym1__ = 1; sym1__ <= N_enzyme_measurement; ++sym1__) {
        current_statement__ = 162;
        check_greater_or_equal(function__, "sigma_enz[sym1__]",
                               sigma_enz[(sym1__ - 1)], 0);
      }
      current_statement__ = 163;
      validate_non_negative_index("prior_loc_dgf", "N_metabolite",
                                  N_metabolite);
      current_statement__ = 164;
      context__.validate_dims("data initialization","prior_loc_dgf","double",
           std::vector<size_t>{static_cast<size_t>(N_metabolite)});
      prior_loc_dgf__ = Eigen::Matrix<double, -1, 1>(N_metabolite);
      new (&prior_loc_dgf) Eigen::Map<Eigen::Matrix<double, -1, 1>>(prior_loc_dgf__.data(), N_metabolite);
      
      
      {
        std::vector<local_scalar_t__> prior_loc_dgf_flat__;
        current_statement__ = 164;
        prior_loc_dgf_flat__ = context__.vals_r("prior_loc_dgf");
        current_statement__ = 164;
        pos__ = 1;
        current_statement__ = 164;
        for (int sym1__ = 1; sym1__ <= N_metabolite; ++sym1__) {
          current_statement__ = 164;
          assign(prior_loc_dgf, prior_loc_dgf_flat__[(pos__ - 1)],
            "assigning variable prior_loc_dgf", index_uni(sym1__));
          current_statement__ = 164;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 165;
      validate_non_negative_index("prior_cov_dgf", "N_metabolite",
                                  N_metabolite);
      current_statement__ = 165;
      validate_non_negative_index("prior_cov_dgf", "N_metabolite",
                                  N_metabolite);
      current_statement__ = 166;
      context__.validate_dims("data initialization","prior_cov_dgf","double",
           std::vector<size_t>{static_cast<size_t>(N_metabolite),
            static_cast<size_t>(N_metabolite)});
      prior_cov_dgf__ = Eigen::Matrix<double, -1, -1>(N_metabolite, N_metabolite);
      new (&prior_cov_dgf) Eigen::Map<Eigen::Matrix<double, -1, -1>>(prior_cov_dgf__.data(), N_metabolite, N_metabolite);
      
      
      {
        std::vector<local_scalar_t__> prior_cov_dgf_flat__;
        current_statement__ = 166;
        prior_cov_dgf_flat__ = context__.vals_r("prior_cov_dgf");
        current_statement__ = 166;
        pos__ = 1;
        current_statement__ = 166;
        for (int sym1__ = 1; sym1__ <= N_metabolite; ++sym1__) {
          current_statement__ = 166;
          for (int sym2__ = 1; sym2__ <= N_metabolite; ++sym2__) {
            current_statement__ = 166;
            assign(prior_cov_dgf, prior_cov_dgf_flat__[(pos__ - 1)],
              "assigning variable prior_cov_dgf", index_uni(sym2__),
                                                    index_uni(sym1__));
            current_statement__ = 166;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 166;
      check_cov_matrix(function__, "prior_cov_dgf", prior_cov_dgf);
      current_statement__ = 167;
      validate_non_negative_index("priors_kcat", "N_enzyme", N_enzyme);
      current_statement__ = 168;
      context__.validate_dims("data initialization","priors_kcat","double",
           std::vector<size_t>{static_cast<size_t>(2),
            static_cast<size_t>(N_enzyme)});
      priors_kcat = std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>(N_enzyme));
      
      
      {
        std::vector<local_scalar_t__> priors_kcat_flat__;
        current_statement__ = 168;
        priors_kcat_flat__ = context__.vals_r("priors_kcat");
        current_statement__ = 168;
        pos__ = 1;
        current_statement__ = 168;
        for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
          current_statement__ = 168;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 168;
            assign(priors_kcat, priors_kcat_flat__[(pos__ - 1)],
              "assigning variable priors_kcat", index_uni(sym2__),
                                                  index_uni(sym1__));
            current_statement__ = 168;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 169;
      validate_non_negative_index("priors_km", "N_km", N_km);
      current_statement__ = 170;
      context__.validate_dims("data initialization","priors_km","double",
           std::vector<size_t>{static_cast<size_t>(2),
            static_cast<size_t>(N_km)});
      priors_km = std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>(N_km));
      
      
      {
        std::vector<local_scalar_t__> priors_km_flat__;
        current_statement__ = 170;
        priors_km_flat__ = context__.vals_r("priors_km");
        current_statement__ = 170;
        pos__ = 1;
        current_statement__ = 170;
        for (int sym1__ = 1; sym1__ <= N_km; ++sym1__) {
          current_statement__ = 170;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 170;
            assign(priors_km, priors_km_flat__[(pos__ - 1)],
              "assigning variable priors_km", index_uni(sym2__),
                                                index_uni(sym1__));
            current_statement__ = 170;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 171;
      validate_non_negative_index("priors_ki", "N_ci", N_ci);
      current_statement__ = 172;
      context__.validate_dims("data initialization","priors_ki","double",
           std::vector<size_t>{static_cast<size_t>(2),
            static_cast<size_t>(N_ci)});
      priors_ki = std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>(N_ci));
      
      
      {
        std::vector<local_scalar_t__> priors_ki_flat__;
        current_statement__ = 172;
        priors_ki_flat__ = context__.vals_r("priors_ki");
        current_statement__ = 172;
        pos__ = 1;
        current_statement__ = 172;
        for (int sym1__ = 1; sym1__ <= N_ci; ++sym1__) {
          current_statement__ = 172;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 172;
            assign(priors_ki, priors_ki_flat__[(pos__ - 1)],
              "assigning variable priors_ki", index_uni(sym2__),
                                                index_uni(sym1__));
            current_statement__ = 172;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 173;
      validate_non_negative_index("priors_diss_t", "N_ai", N_ai);
      current_statement__ = 174;
      context__.validate_dims("data initialization","priors_diss_t","double",
           std::vector<size_t>{static_cast<size_t>(2),
            static_cast<size_t>(N_ai)});
      priors_diss_t = std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>(N_ai));
      
      
      {
        std::vector<local_scalar_t__> priors_diss_t_flat__;
        current_statement__ = 174;
        priors_diss_t_flat__ = context__.vals_r("priors_diss_t");
        current_statement__ = 174;
        pos__ = 1;
        current_statement__ = 174;
        for (int sym1__ = 1; sym1__ <= N_ai; ++sym1__) {
          current_statement__ = 174;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 174;
            assign(priors_diss_t, priors_diss_t_flat__[(pos__ - 1)],
              "assigning variable priors_diss_t", index_uni(sym2__),
                                                    index_uni(sym1__));
            current_statement__ = 174;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 175;
      validate_non_negative_index("priors_diss_r", "N_aa", N_aa);
      current_statement__ = 176;
      context__.validate_dims("data initialization","priors_diss_r","double",
           std::vector<size_t>{static_cast<size_t>(2),
            static_cast<size_t>(N_aa)});
      priors_diss_r = std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>(N_aa));
      
      
      {
        std::vector<local_scalar_t__> priors_diss_r_flat__;
        current_statement__ = 176;
        priors_diss_r_flat__ = context__.vals_r("priors_diss_r");
        current_statement__ = 176;
        pos__ = 1;
        current_statement__ = 176;
        for (int sym1__ = 1; sym1__ <= N_aa; ++sym1__) {
          current_statement__ = 176;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 176;
            assign(priors_diss_r, priors_diss_r_flat__[(pos__ - 1)],
              "assigning variable priors_diss_r", index_uni(sym2__),
                                                    index_uni(sym1__));
            current_statement__ = 176;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 177;
      validate_non_negative_index("priors_transfer_constant", "N_ae", N_ae);
      current_statement__ = 178;
      context__.validate_dims("data initialization",
          "priors_transfer_constant","double",
           std::vector<size_t>{static_cast<size_t>(2),
            static_cast<size_t>(N_ae)});
      priors_transfer_constant = std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>(N_ae));
      
      
      {
        std::vector<local_scalar_t__> priors_transfer_constant_flat__;
        current_statement__ = 178;
        priors_transfer_constant_flat__ = context__.vals_r("priors_transfer_constant");
        current_statement__ = 178;
        pos__ = 1;
        current_statement__ = 178;
        for (int sym1__ = 1; sym1__ <= N_ae; ++sym1__) {
          current_statement__ = 178;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 178;
            assign(priors_transfer_constant,
              priors_transfer_constant_flat__[(pos__ - 1)],
              "assigning variable priors_transfer_constant", index_uni(sym2__),
                                                               index_uni(sym1__));
            current_statement__ = 178;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 179;
      validate_non_negative_index("priors_kcat_phos",
                                  "N_phosphorylation_enzymes",
                                  N_phosphorylation_enzymes);
      current_statement__ = 180;
      context__.validate_dims("data initialization","priors_kcat_phos",
          "double",
           std::vector<size_t>{static_cast<size_t>(2),
            static_cast<size_t>(N_phosphorylation_enzymes)});
      priors_kcat_phos = std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>(N_phosphorylation_enzymes));
      
      
      {
        std::vector<local_scalar_t__> priors_kcat_phos_flat__;
        current_statement__ = 180;
        priors_kcat_phos_flat__ = context__.vals_r("priors_kcat_phos");
        current_statement__ = 180;
        pos__ = 1;
        current_statement__ = 180;
        for (int sym1__ = 1; sym1__ <= N_phosphorylation_enzymes; ++sym1__) {
          current_statement__ = 180;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 180;
            assign(priors_kcat_phos, priors_kcat_phos_flat__[(pos__ - 1)],
              "assigning variable priors_kcat_phos", index_uni(sym2__),
                                                       index_uni(sym1__));
            current_statement__ = 180;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 181;
      validate_non_negative_index("priors_conc_phos", "N_experiment",
                                  N_experiment);
      current_statement__ = 182;
      validate_non_negative_index("priors_conc_phos",
                                  "N_phosphorylation_enzymes",
                                  N_phosphorylation_enzymes);
      current_statement__ = 183;
      context__.validate_dims("data initialization","priors_conc_phos",
          "double",
           std::vector<size_t>{static_cast<size_t>(2),
            static_cast<size_t>(N_experiment),
            static_cast<size_t>(N_phosphorylation_enzymes)});
      priors_conc_phos = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(2, std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_phosphorylation_enzymes)));
      
      
      {
        std::vector<local_scalar_t__> priors_conc_phos_flat__;
        current_statement__ = 183;
        priors_conc_phos_flat__ = context__.vals_r("priors_conc_phos");
        current_statement__ = 183;
        pos__ = 1;
        current_statement__ = 183;
        for (int sym1__ = 1; sym1__ <= N_phosphorylation_enzymes; ++sym1__) {
          current_statement__ = 183;
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            current_statement__ = 183;
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              current_statement__ = 183;
              assign(priors_conc_phos, priors_conc_phos_flat__[(pos__ - 1)],
                "assigning variable priors_conc_phos", index_uni(sym3__),
                                                         index_uni(sym2__),
                                                         index_uni(sym1__));
              current_statement__ = 183;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 184;
      validate_non_negative_index("priors_conc_unbalanced", "N_experiment",
                                  N_experiment);
      current_statement__ = 185;
      validate_non_negative_index("priors_conc_unbalanced", "N_unbalanced",
                                  N_unbalanced);
      current_statement__ = 186;
      context__.validate_dims("data initialization","priors_conc_unbalanced",
          "double",
           std::vector<size_t>{static_cast<size_t>(2),
            static_cast<size_t>(N_experiment),
            static_cast<size_t>(N_unbalanced)});
      priors_conc_unbalanced = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(2, std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_unbalanced)));
      
      
      {
        std::vector<local_scalar_t__> priors_conc_unbalanced_flat__;
        current_statement__ = 186;
        priors_conc_unbalanced_flat__ = context__.vals_r("priors_conc_unbalanced");
        current_statement__ = 186;
        pos__ = 1;
        current_statement__ = 186;
        for (int sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
          current_statement__ = 186;
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            current_statement__ = 186;
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              current_statement__ = 186;
              assign(priors_conc_unbalanced,
                priors_conc_unbalanced_flat__[(pos__ - 1)],
                "assigning variable priors_conc_unbalanced", index_uni(sym3__),
                                                               index_uni(sym2__),
                                                               index_uni(sym1__));
              current_statement__ = 186;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 187;
      validate_non_negative_index("priors_conc_enzyme", "N_experiment",
                                  N_experiment);
      current_statement__ = 188;
      validate_non_negative_index("priors_conc_enzyme", "N_enzyme", N_enzyme);
      current_statement__ = 189;
      context__.validate_dims("data initialization","priors_conc_enzyme",
          "double",
           std::vector<size_t>{static_cast<size_t>(2),
            static_cast<size_t>(N_experiment), static_cast<size_t>(N_enzyme)});
      priors_conc_enzyme = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(2, std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_enzyme)));
      
      
      {
        std::vector<local_scalar_t__> priors_conc_enzyme_flat__;
        current_statement__ = 189;
        priors_conc_enzyme_flat__ = context__.vals_r("priors_conc_enzyme");
        current_statement__ = 189;
        pos__ = 1;
        current_statement__ = 189;
        for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
          current_statement__ = 189;
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            current_statement__ = 189;
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              current_statement__ = 189;
              assign(priors_conc_enzyme,
                priors_conc_enzyme_flat__[(pos__ - 1)],
                "assigning variable priors_conc_enzyme", index_uni(sym3__),
                                                           index_uni(sym2__),
                                                           index_uni(sym1__));
              current_statement__ = 189;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 190;
      validate_non_negative_index("priors_drain", "N_experiment",
                                  N_experiment);
      current_statement__ = 191;
      validate_non_negative_index("priors_drain", "N_drain", N_drain);
      current_statement__ = 192;
      context__.validate_dims("data initialization","priors_drain","double",
           std::vector<size_t>{static_cast<size_t>(2),
            static_cast<size_t>(N_experiment), static_cast<size_t>(N_drain)});
      priors_drain = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(2, std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_drain)));
      
      
      {
        std::vector<local_scalar_t__> priors_drain_flat__;
        current_statement__ = 192;
        priors_drain_flat__ = context__.vals_r("priors_drain");
        current_statement__ = 192;
        pos__ = 1;
        current_statement__ = 192;
        for (int sym1__ = 1; sym1__ <= N_drain; ++sym1__) {
          current_statement__ = 192;
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            current_statement__ = 192;
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              current_statement__ = 192;
              assign(priors_drain, priors_drain_flat__[(pos__ - 1)],
                "assigning variable priors_drain", index_uni(sym3__),
                                                     index_uni(sym2__),
                                                     index_uni(sym1__));
              current_statement__ = 192;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 193;
      validate_non_negative_index("S", "N_mic", N_mic);
      current_statement__ = 194;
      validate_non_negative_index("S", "N_edge", N_edge);
      current_statement__ = 195;
      context__.validate_dims("data initialization","S","double",
           std::vector<size_t>{static_cast<size_t>(N_mic),
            static_cast<size_t>(N_edge)});
      S__ = Eigen::Matrix<double, -1, -1>(N_mic, N_edge);
      new (&S) Eigen::Map<Eigen::Matrix<double, -1, -1>>(S__.data(), N_mic, N_edge);
      
      
      {
        std::vector<local_scalar_t__> S_flat__;
        current_statement__ = 195;
        S_flat__ = context__.vals_r("S");
        current_statement__ = 195;
        pos__ = 1;
        current_statement__ = 195;
        for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
          current_statement__ = 195;
          for (int sym2__ = 1; sym2__ <= N_mic; ++sym2__) {
            current_statement__ = 195;
            assign(S, S_flat__[(pos__ - 1)],
              "assigning variable S", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 195;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 196;
      validate_non_negative_index("edge_type", "N_edge", N_edge);
      current_statement__ = 197;
      context__.validate_dims("data initialization","edge_type","int",
           std::vector<size_t>{static_cast<size_t>(N_edge)});
      edge_type = std::vector<int>(N_edge, std::numeric_limits<int>::min());
      
      current_statement__ = 197;
      edge_type = context__.vals_i("edge_type");
      current_statement__ = 197;
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        current_statement__ = 197;
        check_greater_or_equal(function__, "edge_type[sym1__]",
                               edge_type[(sym1__ - 1)], 1);
      }
      current_statement__ = 197;
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        current_statement__ = 197;
        check_less_or_equal(function__, "edge_type[sym1__]",
                            edge_type[(sym1__ - 1)], 4);
      }
      current_statement__ = 198;
      validate_non_negative_index("edge_to_enzyme", "N_edge", N_edge);
      current_statement__ = 199;
      context__.validate_dims("data initialization","edge_to_enzyme","int",
           std::vector<size_t>{static_cast<size_t>(N_edge)});
      edge_to_enzyme = std::vector<int>(N_edge, std::numeric_limits<int>::min());
      
      
      current_statement__ = 199;
      edge_to_enzyme = context__.vals_i("edge_to_enzyme");
      current_statement__ = 199;
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        current_statement__ = 199;
        check_greater_or_equal(function__, "edge_to_enzyme[sym1__]",
                               edge_to_enzyme[(sym1__ - 1)], 0);
      }
      current_statement__ = 199;
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        current_statement__ = 199;
        check_less_or_equal(function__, "edge_to_enzyme[sym1__]",
                            edge_to_enzyme[(sym1__ - 1)], N_enzyme);
      }
      current_statement__ = 200;
      validate_non_negative_index("edge_to_tc", "N_edge", N_edge);
      current_statement__ = 201;
      context__.validate_dims("data initialization","edge_to_tc","int",
           std::vector<size_t>{static_cast<size_t>(N_edge)});
      edge_to_tc = std::vector<int>(N_edge, std::numeric_limits<int>::min());
      
      current_statement__ = 201;
      edge_to_tc = context__.vals_i("edge_to_tc");
      current_statement__ = 201;
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        current_statement__ = 201;
        check_greater_or_equal(function__, "edge_to_tc[sym1__]",
                               edge_to_tc[(sym1__ - 1)], 0);
      }
      current_statement__ = 201;
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        current_statement__ = 201;
        check_less_or_equal(function__, "edge_to_tc[sym1__]",
                            edge_to_tc[(sym1__ - 1)], N_ae);
      }
      current_statement__ = 202;
      validate_non_negative_index("edge_to_drain", "N_edge", N_edge);
      current_statement__ = 203;
      context__.validate_dims("data initialization","edge_to_drain","int",
           std::vector<size_t>{static_cast<size_t>(N_edge)});
      edge_to_drain = std::vector<int>(N_edge, std::numeric_limits<int>::min());
      
      
      current_statement__ = 203;
      edge_to_drain = context__.vals_i("edge_to_drain");
      current_statement__ = 203;
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        current_statement__ = 203;
        check_greater_or_equal(function__, "edge_to_drain[sym1__]",
                               edge_to_drain[(sym1__ - 1)], 0);
      }
      current_statement__ = 203;
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        current_statement__ = 203;
        check_less_or_equal(function__, "edge_to_drain[sym1__]",
                            edge_to_drain[(sym1__ - 1)], N_drain);
      }
      current_statement__ = 204;
      validate_non_negative_index("edge_to_reaction", "N_edge", N_edge);
      current_statement__ = 205;
      context__.validate_dims("data initialization","edge_to_reaction","int",
           std::vector<size_t>{static_cast<size_t>(N_edge)});
      edge_to_reaction = std::vector<int>(N_edge, std::numeric_limits<int>::min());
      
      
      current_statement__ = 205;
      edge_to_reaction = context__.vals_i("edge_to_reaction");
      current_statement__ = 205;
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        current_statement__ = 205;
        check_greater_or_equal(function__, "edge_to_reaction[sym1__]",
                               edge_to_reaction[(sym1__ - 1)], 0);
      }
      current_statement__ = 205;
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        current_statement__ = 205;
        check_less_or_equal(function__, "edge_to_reaction[sym1__]",
                            edge_to_reaction[(sym1__ - 1)], N_reaction);
      }
      current_statement__ = 206;
      validate_non_negative_index("km_lookup", "N_mic", N_mic);
      current_statement__ = 207;
      validate_non_negative_index("km_lookup", "N_edge", N_edge);
      current_statement__ = 208;
      context__.validate_dims("data initialization","km_lookup","int",
           std::vector<size_t>{static_cast<size_t>(N_mic),
            static_cast<size_t>(N_edge)});
      km_lookup = std::vector<std::vector<int>>(N_mic, std::vector<int>(N_edge, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> km_lookup_flat__;
        current_statement__ = 208;
        km_lookup_flat__ = context__.vals_i("km_lookup");
        current_statement__ = 208;
        pos__ = 1;
        current_statement__ = 208;
        for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
          current_statement__ = 208;
          for (int sym2__ = 1; sym2__ <= N_mic; ++sym2__) {
            current_statement__ = 208;
            assign(km_lookup, km_lookup_flat__[(pos__ - 1)],
              "assigning variable km_lookup", index_uni(sym2__),
                                                index_uni(sym1__));
            current_statement__ = 208;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 208;
      for (int sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
        current_statement__ = 208;
        for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
          current_statement__ = 208;
          check_greater_or_equal(function__, "km_lookup[sym1__, sym2__]",
                                 km_lookup[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      current_statement__ = 208;
      for (int sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
        current_statement__ = 208;
        for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
          current_statement__ = 208;
          check_less_or_equal(function__, "km_lookup[sym1__, sym2__]",
                              km_lookup[(sym1__ - 1)][(sym2__ - 1)], N_km);
        }
      }
      current_statement__ = 209;
      validate_non_negative_index("ki_lookup", "N_mic", N_mic);
      current_statement__ = 210;
      validate_non_negative_index("ki_lookup", "N_edge", N_edge);
      current_statement__ = 211;
      context__.validate_dims("data initialization","ki_lookup","int",
           std::vector<size_t>{static_cast<size_t>(N_mic),
            static_cast<size_t>(N_edge)});
      ki_lookup = std::vector<std::vector<int>>(N_mic, std::vector<int>(N_edge, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> ki_lookup_flat__;
        current_statement__ = 211;
        ki_lookup_flat__ = context__.vals_i("ki_lookup");
        current_statement__ = 211;
        pos__ = 1;
        current_statement__ = 211;
        for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
          current_statement__ = 211;
          for (int sym2__ = 1; sym2__ <= N_mic; ++sym2__) {
            current_statement__ = 211;
            assign(ki_lookup, ki_lookup_flat__[(pos__ - 1)],
              "assigning variable ki_lookup", index_uni(sym2__),
                                                index_uni(sym1__));
            current_statement__ = 211;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 211;
      for (int sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
        current_statement__ = 211;
        for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
          current_statement__ = 211;
          check_greater_or_equal(function__, "ki_lookup[sym1__, sym2__]",
                                 ki_lookup[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      current_statement__ = 211;
      for (int sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
        current_statement__ = 211;
        for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
          current_statement__ = 211;
          check_less_or_equal(function__, "ki_lookup[sym1__, sym2__]",
                              ki_lookup[(sym1__ - 1)][(sym2__ - 1)], N_ci);
        }
      }
      current_statement__ = 212;
      validate_non_negative_index("dt_lookup", "N_mic", N_mic);
      current_statement__ = 213;
      validate_non_negative_index("dt_lookup", "N_edge", N_edge);
      current_statement__ = 214;
      context__.validate_dims("data initialization","dt_lookup","int",
           std::vector<size_t>{static_cast<size_t>(N_mic),
            static_cast<size_t>(N_edge)});
      dt_lookup = std::vector<std::vector<int>>(N_mic, std::vector<int>(N_edge, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> dt_lookup_flat__;
        current_statement__ = 214;
        dt_lookup_flat__ = context__.vals_i("dt_lookup");
        current_statement__ = 214;
        pos__ = 1;
        current_statement__ = 214;
        for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
          current_statement__ = 214;
          for (int sym2__ = 1; sym2__ <= N_mic; ++sym2__) {
            current_statement__ = 214;
            assign(dt_lookup, dt_lookup_flat__[(pos__ - 1)],
              "assigning variable dt_lookup", index_uni(sym2__),
                                                index_uni(sym1__));
            current_statement__ = 214;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 214;
      for (int sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
        current_statement__ = 214;
        for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
          current_statement__ = 214;
          check_greater_or_equal(function__, "dt_lookup[sym1__, sym2__]",
                                 dt_lookup[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      current_statement__ = 214;
      for (int sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
        current_statement__ = 214;
        for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
          current_statement__ = 214;
          check_less_or_equal(function__, "dt_lookup[sym1__, sym2__]",
                              dt_lookup[(sym1__ - 1)][(sym2__ - 1)], N_ai);
        }
      }
      current_statement__ = 215;
      validate_non_negative_index("dr_lookup", "N_mic", N_mic);
      current_statement__ = 216;
      validate_non_negative_index("dr_lookup", "N_edge", N_edge);
      current_statement__ = 217;
      context__.validate_dims("data initialization","dr_lookup","int",
           std::vector<size_t>{static_cast<size_t>(N_mic),
            static_cast<size_t>(N_edge)});
      dr_lookup = std::vector<std::vector<int>>(N_mic, std::vector<int>(N_edge, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> dr_lookup_flat__;
        current_statement__ = 217;
        dr_lookup_flat__ = context__.vals_i("dr_lookup");
        current_statement__ = 217;
        pos__ = 1;
        current_statement__ = 217;
        for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
          current_statement__ = 217;
          for (int sym2__ = 1; sym2__ <= N_mic; ++sym2__) {
            current_statement__ = 217;
            assign(dr_lookup, dr_lookup_flat__[(pos__ - 1)],
              "assigning variable dr_lookup", index_uni(sym2__),
                                                index_uni(sym1__));
            current_statement__ = 217;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 217;
      for (int sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
        current_statement__ = 217;
        for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
          current_statement__ = 217;
          check_greater_or_equal(function__, "dr_lookup[sym1__, sym2__]",
                                 dr_lookup[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      current_statement__ = 217;
      for (int sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
        current_statement__ = 217;
        for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
          current_statement__ = 217;
          check_less_or_equal(function__, "dr_lookup[sym1__, sym2__]",
                              dr_lookup[(sym1__ - 1)][(sym2__ - 1)], N_aa);
        }
      }
      current_statement__ = 218;
      validate_non_negative_index("sub_by_edge_long", "N_edge_sub",
                                  N_edge_sub);
      current_statement__ = 219;
      context__.validate_dims("data initialization","sub_by_edge_long","int",
           std::vector<size_t>{static_cast<size_t>(N_edge_sub)});
      sub_by_edge_long = std::vector<int>(N_edge_sub, std::numeric_limits<int>::min());
      
      
      current_statement__ = 219;
      sub_by_edge_long = context__.vals_i("sub_by_edge_long");
      current_statement__ = 220;
      validate_non_negative_index("sub_by_edge_bounds", "N_edge", N_edge);
      current_statement__ = 221;
      context__.validate_dims("data initialization","sub_by_edge_bounds",
          "int",
           std::vector<size_t>{static_cast<size_t>(N_edge),
            static_cast<size_t>(2)});
      sub_by_edge_bounds = std::vector<std::vector<int>>(N_edge, std::vector<int>(2, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> sub_by_edge_bounds_flat__;
        current_statement__ = 221;
        sub_by_edge_bounds_flat__ = context__.vals_i("sub_by_edge_bounds");
        current_statement__ = 221;
        pos__ = 1;
        current_statement__ = 221;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 221;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 221;
            assign(sub_by_edge_bounds,
              sub_by_edge_bounds_flat__[(pos__ - 1)],
              "assigning variable sub_by_edge_bounds", index_uni(sym2__),
                                                         index_uni(sym1__));
            current_statement__ = 221;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 222;
      validate_non_negative_index("prod_by_edge_long", "N_edge_prod",
                                  N_edge_prod);
      current_statement__ = 223;
      context__.validate_dims("data initialization","prod_by_edge_long",
          "int", std::vector<size_t>{static_cast<size_t>(N_edge_prod)});
      prod_by_edge_long = std::vector<int>(N_edge_prod, std::numeric_limits<int>::min());
      
      
      current_statement__ = 223;
      prod_by_edge_long = context__.vals_i("prod_by_edge_long");
      current_statement__ = 224;
      validate_non_negative_index("prod_by_edge_bounds", "N_edge", N_edge);
      current_statement__ = 225;
      context__.validate_dims("data initialization","prod_by_edge_bounds",
          "int",
           std::vector<size_t>{static_cast<size_t>(N_edge),
            static_cast<size_t>(2)});
      prod_by_edge_bounds = std::vector<std::vector<int>>(N_edge, std::vector<int>(2, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> prod_by_edge_bounds_flat__;
        current_statement__ = 225;
        prod_by_edge_bounds_flat__ = context__.vals_i("prod_by_edge_bounds");
        current_statement__ = 225;
        pos__ = 1;
        current_statement__ = 225;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 225;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 225;
            assign(prod_by_edge_bounds,
              prod_by_edge_bounds_flat__[(pos__ - 1)],
              "assigning variable prod_by_edge_bounds", index_uni(sym2__),
                                                          index_uni(sym1__));
            current_statement__ = 225;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 226;
      validate_non_negative_index("ci_by_edge_long", "N_ci", N_ci);
      current_statement__ = 227;
      context__.validate_dims("data initialization","ci_by_edge_long","int",
           std::vector<size_t>{static_cast<size_t>(N_ci)});
      ci_by_edge_long = std::vector<int>(N_ci, std::numeric_limits<int>::min());
      
      
      current_statement__ = 227;
      ci_by_edge_long = context__.vals_i("ci_by_edge_long");
      current_statement__ = 228;
      validate_non_negative_index("ci_by_edge_bounds", "N_edge", N_edge);
      current_statement__ = 229;
      context__.validate_dims("data initialization","ci_by_edge_bounds",
          "int",
           std::vector<size_t>{static_cast<size_t>(N_edge),
            static_cast<size_t>(2)});
      ci_by_edge_bounds = std::vector<std::vector<int>>(N_edge, std::vector<int>(2, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> ci_by_edge_bounds_flat__;
        current_statement__ = 229;
        ci_by_edge_bounds_flat__ = context__.vals_i("ci_by_edge_bounds");
        current_statement__ = 229;
        pos__ = 1;
        current_statement__ = 229;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 229;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 229;
            assign(ci_by_edge_bounds, ci_by_edge_bounds_flat__[(pos__ - 1)],
              "assigning variable ci_by_edge_bounds", index_uni(sym2__),
                                                        index_uni(sym1__));
            current_statement__ = 229;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 230;
      validate_non_negative_index("ai_ix_long", "N_ai", N_ai);
      current_statement__ = 231;
      context__.validate_dims("data initialization","ai_ix_long","int",
           std::vector<size_t>{static_cast<size_t>(N_ai)});
      ai_ix_long = std::vector<int>(N_ai, std::numeric_limits<int>::min());
      
      current_statement__ = 231;
      ai_ix_long = context__.vals_i("ai_ix_long");
      current_statement__ = 232;
      validate_non_negative_index("ai_ix_bounds", "N_edge", N_edge);
      current_statement__ = 233;
      context__.validate_dims("data initialization","ai_ix_bounds","int",
           std::vector<size_t>{static_cast<size_t>(N_edge),
            static_cast<size_t>(2)});
      ai_ix_bounds = std::vector<std::vector<int>>(N_edge, std::vector<int>(2, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> ai_ix_bounds_flat__;
        current_statement__ = 233;
        ai_ix_bounds_flat__ = context__.vals_i("ai_ix_bounds");
        current_statement__ = 233;
        pos__ = 1;
        current_statement__ = 233;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 233;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 233;
            assign(ai_ix_bounds, ai_ix_bounds_flat__[(pos__ - 1)],
              "assigning variable ai_ix_bounds", index_uni(sym2__),
                                                   index_uni(sym1__));
            current_statement__ = 233;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 234;
      validate_non_negative_index("aa_ix_long", "N_aa", N_aa);
      current_statement__ = 235;
      context__.validate_dims("data initialization","aa_ix_long","int",
           std::vector<size_t>{static_cast<size_t>(N_aa)});
      aa_ix_long = std::vector<int>(N_aa, std::numeric_limits<int>::min());
      
      current_statement__ = 235;
      aa_ix_long = context__.vals_i("aa_ix_long");
      current_statement__ = 236;
      validate_non_negative_index("aa_ix_bounds", "N_edge", N_edge);
      current_statement__ = 237;
      context__.validate_dims("data initialization","aa_ix_bounds","int",
           std::vector<size_t>{static_cast<size_t>(N_edge),
            static_cast<size_t>(2)});
      aa_ix_bounds = std::vector<std::vector<int>>(N_edge, std::vector<int>(2, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> aa_ix_bounds_flat__;
        current_statement__ = 237;
        aa_ix_bounds_flat__ = context__.vals_i("aa_ix_bounds");
        current_statement__ = 237;
        pos__ = 1;
        current_statement__ = 237;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 237;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 237;
            assign(aa_ix_bounds, aa_ix_bounds_flat__[(pos__ - 1)],
              "assigning variable aa_ix_bounds", index_uni(sym2__),
                                                   index_uni(sym1__));
            current_statement__ = 237;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 238;
      validate_non_negative_index("pa_ix_long", "N_pa", N_pa);
      current_statement__ = 239;
      context__.validate_dims("data initialization","pa_ix_long","int",
           std::vector<size_t>{static_cast<size_t>(N_pa)});
      pa_ix_long = std::vector<int>(N_pa, std::numeric_limits<int>::min());
      
      current_statement__ = 239;
      pa_ix_long = context__.vals_i("pa_ix_long");
      current_statement__ = 240;
      validate_non_negative_index("pa_ix_bounds", "N_edge", N_edge);
      current_statement__ = 241;
      context__.validate_dims("data initialization","pa_ix_bounds","int",
           std::vector<size_t>{static_cast<size_t>(N_edge),
            static_cast<size_t>(2)});
      pa_ix_bounds = std::vector<std::vector<int>>(N_edge, std::vector<int>(2, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> pa_ix_bounds_flat__;
        current_statement__ = 241;
        pa_ix_bounds_flat__ = context__.vals_i("pa_ix_bounds");
        current_statement__ = 241;
        pos__ = 1;
        current_statement__ = 241;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 241;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 241;
            assign(pa_ix_bounds, pa_ix_bounds_flat__[(pos__ - 1)],
              "assigning variable pa_ix_bounds", index_uni(sym2__),
                                                   index_uni(sym1__));
            current_statement__ = 241;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 242;
      validate_non_negative_index("pi_ix_long", "N_pi", N_pi);
      current_statement__ = 243;
      context__.validate_dims("data initialization","pi_ix_long","int",
           std::vector<size_t>{static_cast<size_t>(N_pi)});
      pi_ix_long = std::vector<int>(N_pi, std::numeric_limits<int>::min());
      
      current_statement__ = 243;
      pi_ix_long = context__.vals_i("pi_ix_long");
      current_statement__ = 244;
      validate_non_negative_index("pi_ix_bounds", "N_edge", N_edge);
      current_statement__ = 245;
      context__.validate_dims("data initialization","pi_ix_bounds","int",
           std::vector<size_t>{static_cast<size_t>(N_edge),
            static_cast<size_t>(2)});
      pi_ix_bounds = std::vector<std::vector<int>>(N_edge, std::vector<int>(2, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> pi_ix_bounds_flat__;
        current_statement__ = 245;
        pi_ix_bounds_flat__ = context__.vals_i("pi_ix_bounds");
        current_statement__ = 245;
        pos__ = 1;
        current_statement__ = 245;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 245;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 245;
            assign(pi_ix_bounds, pi_ix_bounds_flat__[(pos__ - 1)],
              "assigning variable pi_ix_bounds", index_uni(sym2__),
                                                   index_uni(sym1__));
            current_statement__ = 245;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 246;
      validate_non_negative_index("mic_to_met", "N_mic", N_mic);
      current_statement__ = 247;
      context__.validate_dims("data initialization","mic_to_met","int",
           std::vector<size_t>{static_cast<size_t>(N_mic)});
      mic_to_met = std::vector<int>(N_mic, std::numeric_limits<int>::min());
      
      current_statement__ = 247;
      mic_to_met = context__.vals_i("mic_to_met");
      current_statement__ = 247;
      for (int sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
        current_statement__ = 247;
        check_greater_or_equal(function__, "mic_to_met[sym1__]",
                               mic_to_met[(sym1__ - 1)], 1);
      }
      current_statement__ = 247;
      for (int sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
        current_statement__ = 247;
        check_less_or_equal(function__, "mic_to_met[sym1__]",
                            mic_to_met[(sym1__ - 1)], N_metabolite);
      }
      current_statement__ = 248;
      validate_non_negative_index("water_stoichiometry", "N_edge", N_edge);
      current_statement__ = 249;
      context__.validate_dims("data initialization","water_stoichiometry",
          "double", std::vector<size_t>{static_cast<size_t>(N_edge)});
      water_stoichiometry__ = Eigen::Matrix<double, -1, 1>(N_edge);
      new (&water_stoichiometry) Eigen::Map<Eigen::Matrix<double, -1, 1>>(water_stoichiometry__.data(), N_edge);
      
      
      {
        std::vector<local_scalar_t__> water_stoichiometry_flat__;
        current_statement__ = 249;
        water_stoichiometry_flat__ = context__.vals_r("water_stoichiometry");
        current_statement__ = 249;
        pos__ = 1;
        current_statement__ = 249;
        for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
          current_statement__ = 249;
          assign(water_stoichiometry,
            water_stoichiometry_flat__[(pos__ - 1)],
            "assigning variable water_stoichiometry", index_uni(sym1__));
          current_statement__ = 249;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 250;
      validate_non_negative_index("transported_charge", "N_edge", N_edge);
      current_statement__ = 251;
      context__.validate_dims("data initialization","transported_charge",
          "double", std::vector<size_t>{static_cast<size_t>(N_edge)});
      transported_charge__ = Eigen::Matrix<double, -1, 1>(N_edge);
      new (&transported_charge) Eigen::Map<Eigen::Matrix<double, -1, 1>>(transported_charge__.data(), N_edge);
      
      
      {
        std::vector<local_scalar_t__> transported_charge_flat__;
        current_statement__ = 251;
        transported_charge_flat__ = context__.vals_r("transported_charge");
        current_statement__ = 251;
        pos__ = 1;
        current_statement__ = 251;
        for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
          current_statement__ = 251;
          assign(transported_charge, transported_charge_flat__[(pos__ - 1)],
            "assigning variable transported_charge", index_uni(sym1__));
          current_statement__ = 251;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 252;
      validate_non_negative_index("is_knockout", "N_experiment", N_experiment);
      current_statement__ = 253;
      validate_non_negative_index("is_knockout", "N_enzyme", N_enzyme);
      current_statement__ = 254;
      context__.validate_dims("data initialization","is_knockout","double",
           std::vector<size_t>{static_cast<size_t>(N_experiment),
            static_cast<size_t>(N_enzyme)});
      is_knockout__ = Eigen::Matrix<double, -1, -1>(N_experiment, N_enzyme);
      new (&is_knockout) Eigen::Map<Eigen::Matrix<double, -1, -1>>(is_knockout__.data(), N_experiment, N_enzyme);
      
      
      {
        std::vector<local_scalar_t__> is_knockout_flat__;
        current_statement__ = 254;
        is_knockout_flat__ = context__.vals_r("is_knockout");
        current_statement__ = 254;
        pos__ = 1;
        current_statement__ = 254;
        for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
          current_statement__ = 254;
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            current_statement__ = 254;
            assign(is_knockout, is_knockout_flat__[(pos__ - 1)],
              "assigning variable is_knockout", index_uni(sym2__),
                                                  index_uni(sym1__));
            current_statement__ = 254;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 254;
      for (int sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 254;
        for (int sym2__ = 1; sym2__ <= N_enzyme; ++sym2__) {
          current_statement__ = 254;
          check_greater_or_equal(function__, "is_knockout[sym1__, sym2__]",
                                 rvalue(is_knockout, "is_knockout",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 254;
      for (int sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 254;
        for (int sym2__ = 1; sym2__ <= N_enzyme; ++sym2__) {
          current_statement__ = 254;
          check_less_or_equal(function__, "is_knockout[sym1__, sym2__]",
                              rvalue(is_knockout, "is_knockout",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 255;
      validate_non_negative_index("is_phos_knockout", "N_experiment",
                                  N_experiment);
      current_statement__ = 256;
      validate_non_negative_index("is_phos_knockout",
                                  "N_phosphorylation_enzymes",
                                  N_phosphorylation_enzymes);
      current_statement__ = 257;
      context__.validate_dims("data initialization","is_phos_knockout",
          "double",
           std::vector<size_t>{static_cast<size_t>(N_experiment),
            static_cast<size_t>(N_phosphorylation_enzymes)});
      is_phos_knockout__ = Eigen::Matrix<double, -1, -1>(N_experiment, N_phosphorylation_enzymes);
      new (&is_phos_knockout) Eigen::Map<Eigen::Matrix<double, -1, -1>>(is_phos_knockout__.data(), N_experiment, N_phosphorylation_enzymes);
      
      
      {
        std::vector<local_scalar_t__> is_phos_knockout_flat__;
        current_statement__ = 257;
        is_phos_knockout_flat__ = context__.vals_r("is_phos_knockout");
        current_statement__ = 257;
        pos__ = 1;
        current_statement__ = 257;
        for (int sym1__ = 1; sym1__ <= N_phosphorylation_enzymes; ++sym1__) {
          current_statement__ = 257;
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            current_statement__ = 257;
            assign(is_phos_knockout, is_phos_knockout_flat__[(pos__ - 1)],
              "assigning variable is_phos_knockout", index_uni(sym2__),
                                                       index_uni(sym1__));
            current_statement__ = 257;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 257;
      for (int sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 257;
        for (int sym2__ = 1; sym2__ <= N_phosphorylation_enzymes; ++sym2__) {
          current_statement__ = 257;
          check_greater_or_equal(function__,
                                 "is_phos_knockout[sym1__, sym2__]",
                                 rvalue(is_phos_knockout, "is_phos_knockout",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 257;
      for (int sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 257;
        for (int sym2__ = 1; sym2__ <= N_phosphorylation_enzymes; ++sym2__) {
          current_statement__ = 257;
          check_less_or_equal(function__, "is_phos_knockout[sym1__, sym2__]",
                              rvalue(is_phos_knockout, "is_phos_knockout",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 258;
      validate_non_negative_index("subunits", "N_enzyme", N_enzyme);
      current_statement__ = 259;
      context__.validate_dims("data initialization","subunits","double",
           std::vector<size_t>{static_cast<size_t>(N_enzyme)});
      subunits__ = Eigen::Matrix<double, -1, 1>(N_enzyme);
      new (&subunits) Eigen::Map<Eigen::Matrix<double, -1, 1>>(subunits__.data(), N_enzyme);
      
      
      {
        std::vector<local_scalar_t__> subunits_flat__;
        current_statement__ = 259;
        subunits_flat__ = context__.vals_r("subunits");
        current_statement__ = 259;
        pos__ = 1;
        current_statement__ = 259;
        for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
          current_statement__ = 259;
          assign(subunits, subunits_flat__[(pos__ - 1)],
            "assigning variable subunits", index_uni(sym1__));
          current_statement__ = 259;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 259;
      for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
        current_statement__ = 259;
        check_greater_or_equal(function__, "subunits[sym1__]",
                               subunits[(sym1__ - 1)], 1);
      }
      current_statement__ = 260;
      validate_non_negative_index("priors_psi", "N_experiment", N_experiment);
      current_statement__ = 261;
      context__.validate_dims("data initialization","priors_psi","double",
           std::vector<size_t>{static_cast<size_t>(2),
            static_cast<size_t>(N_experiment)});
      priors_psi = std::vector<Eigen::Matrix<double, -1, 1>>(2, Eigen::Matrix<double, -1, 1>(N_experiment));
      
      
      {
        std::vector<local_scalar_t__> priors_psi_flat__;
        current_statement__ = 261;
        priors_psi_flat__ = context__.vals_r("priors_psi");
        current_statement__ = 261;
        pos__ = 1;
        current_statement__ = 261;
        for (int sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
          current_statement__ = 261;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 261;
            assign(priors_psi, priors_psi_flat__[(pos__ - 1)],
              "assigning variable priors_psi", index_uni(sym2__),
                                                 index_uni(sym1__));
            current_statement__ = 261;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 262;
      validate_non_negative_index("temperature", "N_experiment", N_experiment);
      current_statement__ = 263;
      context__.validate_dims("data initialization","temperature","double",
           std::vector<size_t>{static_cast<size_t>(N_experiment)});
      temperature__ = Eigen::Matrix<double, -1, 1>(N_experiment);
      new (&temperature) Eigen::Map<Eigen::Matrix<double, -1, 1>>(temperature__.data(), N_experiment);
      
      
      {
        std::vector<local_scalar_t__> temperature_flat__;
        current_statement__ = 263;
        temperature_flat__ = context__.vals_r("temperature");
        current_statement__ = 263;
        pos__ = 1;
        current_statement__ = 263;
        for (int sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
          current_statement__ = 263;
          assign(temperature, temperature_flat__[(pos__ - 1)],
            "assigning variable temperature", index_uni(sym1__));
          current_statement__ = 263;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 264;
      validate_non_negative_index("conc_init", "N_experiment", N_experiment);
      current_statement__ = 265;
      validate_non_negative_index("conc_init", "N_mic", N_mic);
      current_statement__ = 266;
      context__.validate_dims("data initialization","conc_init","double",
           std::vector<size_t>{static_cast<size_t>(N_experiment),
            static_cast<size_t>(N_mic)});
      conc_init = std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_mic));
      
      
      {
        std::vector<local_scalar_t__> conc_init_flat__;
        current_statement__ = 266;
        conc_init_flat__ = context__.vals_r("conc_init");
        current_statement__ = 266;
        pos__ = 1;
        current_statement__ = 266;
        for (int sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
          current_statement__ = 266;
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            current_statement__ = 266;
            assign(conc_init, conc_init_flat__[(pos__ - 1)],
              "assigning variable conc_init", index_uni(sym2__),
                                                index_uni(sym1__));
            current_statement__ = 266;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 266;
      for (int sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 266;
        for (int sym2__ = 1; sym2__ <= N_mic; ++sym2__) {
          current_statement__ = 266;
          check_greater_or_equal(function__, "conc_init[sym1__, sym2__]",
                                 conc_init[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      current_statement__ = 267;
      context__.validate_dims("data initialization","rel_tol","double",
           std::vector<size_t>{});
      rel_tol = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 267;
      rel_tol = context__.vals_r("rel_tol")[(1 - 1)];
      current_statement__ = 268;
      context__.validate_dims("data initialization","abs_tol","double",
           std::vector<size_t>{});
      abs_tol = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 268;
      abs_tol = context__.vals_r("abs_tol")[(1 - 1)];
      current_statement__ = 269;
      context__.validate_dims("data initialization",
          "steady_state_threshold_abs","double", std::vector<size_t>{});
      steady_state_threshold_abs = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 269;
      steady_state_threshold_abs = context__.vals_r("steady_state_threshold_abs")[
          (1 - 1)];
      current_statement__ = 270;
      context__.validate_dims("data initialization",
          "steady_state_threshold_rel","double", std::vector<size_t>{});
      steady_state_threshold_rel = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 270;
      steady_state_threshold_rel = context__.vals_r("steady_state_threshold_rel")[
          (1 - 1)];
      current_statement__ = 271;
      context__.validate_dims("data initialization","max_num_steps","int",
           std::vector<size_t>{});
      max_num_steps = std::numeric_limits<int>::min();
      
      current_statement__ = 271;
      max_num_steps = context__.vals_i("max_num_steps")[(1 - 1)];
      current_statement__ = 272;
      context__.validate_dims("data initialization",
          "drain_small_conc_corrector","double", std::vector<size_t>{});
      drain_small_conc_corrector = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 272;
      drain_small_conc_corrector = context__.vals_r("drain_small_conc_corrector")[
          (1 - 1)];
      current_statement__ = 273;
      context__.validate_dims("data initialization","LIKELIHOOD","int",
           std::vector<size_t>{});
      LIKELIHOOD = std::numeric_limits<int>::min();
      
      current_statement__ = 273;
      LIKELIHOOD = context__.vals_i("LIKELIHOOD")[(1 - 1)];
      current_statement__ = 273;
      check_greater_or_equal(function__, "LIKELIHOOD", LIKELIHOOD, 0);
      current_statement__ = 273;
      check_less_or_equal(function__, "LIKELIHOOD", LIKELIHOOD, 1);
      current_statement__ = 274;
      context__.validate_dims("data initialization","timepoint","double",
           std::vector<size_t>{});
      timepoint = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 274;
      timepoint = context__.vals_r("timepoint")[(1 - 1)];
      current_statement__ = 274;
      check_greater_or_equal(function__, "timepoint", timepoint, 0);
      current_statement__ = 275;
      context__.validate_dims("data initialization","reject_non_steady",
          "int", std::vector<size_t>{});
      reject_non_steady = std::numeric_limits<int>::min();
      
      current_statement__ = 275;
      reject_non_steady = context__.vals_i("reject_non_steady")[(1 - 1)];
      current_statement__ = 275;
      check_greater_or_equal(function__, "reject_non_steady",
                             reject_non_steady, 0);
      current_statement__ = 275;
      check_less_or_equal(function__, "reject_non_steady", reject_non_steady,
                          1);
      current_statement__ = 276;
      initial_time = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 276;
      initial_time = 0;
      current_statement__ = 277;
      validate_non_negative_index("knockout", "N_experiment", N_experiment);
      current_statement__ = 278;
      validate_non_negative_index("knockout", "N_enzyme", N_enzyme);
      current_statement__ = 279;
      knockout__ = Eigen::Matrix<double, -1, -1>(N_experiment, N_enzyme);
      new (&knockout) Eigen::Map<Eigen::Matrix<double, -1, -1>>(knockout__.data(), N_experiment, N_enzyme);
      stan::math::fill(knockout, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 279;
      assign(knockout,
        subtract(rep_matrix(1, N_experiment, N_enzyme), is_knockout),
        "assigning variable knockout");
      current_statement__ = 280;
      validate_non_negative_index("phos_knockout", "N_experiment",
                                  N_experiment);
      current_statement__ = 281;
      validate_non_negative_index("phos_knockout",
                                  "N_phosphorylation_enzymes",
                                  N_phosphorylation_enzymes);
      current_statement__ = 282;
      phos_knockout__ = Eigen::Matrix<double, -1, -1>(N_experiment, N_phosphorylation_enzymes);
      new (&phos_knockout) Eigen::Map<Eigen::Matrix<double, -1, -1>>(phos_knockout__.data(), N_experiment, N_phosphorylation_enzymes);
      stan::math::fill(phos_knockout, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 282;
      assign(phos_knockout,
        subtract(rep_matrix(1, N_experiment, N_phosphorylation_enzymes),
          is_phos_knockout), "assigning variable phos_knockout");
      current_statement__ = 283;
      validate_non_negative_index("prior_cov_dgf_chol", "N_metabolite",
                                  N_metabolite);
      current_statement__ = 284;
      validate_non_negative_index("prior_cov_dgf_chol", "N_metabolite",
                                  N_metabolite);
      current_statement__ = 285;
      prior_cov_dgf_chol__ = Eigen::Matrix<double, -1, -1>(N_metabolite, N_metabolite);
      new (&prior_cov_dgf_chol) Eigen::Map<Eigen::Matrix<double, -1, -1>>(prior_cov_dgf_chol__.data(), N_metabolite, N_metabolite);
      stan::math::fill(prior_cov_dgf_chol, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 285;
      assign(prior_cov_dgf_chol, cholesky_decompose(prior_cov_dgf),
        "assigning variable prior_cov_dgf_chol");
      current_statement__ = 286;
      validate_non_negative_index("dgf", "N_metabolite", N_metabolite);
      current_statement__ = 287;
      validate_non_negative_index("log_kcat_z", "N_enzyme", N_enzyme);
      current_statement__ = 288;
      validate_non_negative_index("log_km_z", "N_km", N_km);
      current_statement__ = 289;
      validate_non_negative_index("log_kcat_phos_z",
                                  "N_phosphorylation_enzymes",
                                  N_phosphorylation_enzymes);
      current_statement__ = 290;
      validate_non_negative_index("log_ki_z", "N_ci", N_ci);
      current_statement__ = 291;
      validate_non_negative_index("log_diss_t_z", "N_ai", N_ai);
      current_statement__ = 292;
      validate_non_negative_index("log_diss_r_z", "N_aa", N_aa);
      current_statement__ = 293;
      validate_non_negative_index("log_transfer_constant_z", "N_ae", N_ae);
      current_statement__ = 294;
      validate_non_negative_index("psi_z", "N_experiment", N_experiment);
      current_statement__ = 295;
      validate_non_negative_index("drain_z", "N_experiment", N_experiment);
      current_statement__ = 296;
      validate_non_negative_index("drain_z", "N_drain", N_drain);
      current_statement__ = 297;
      validate_non_negative_index("log_conc_enzyme_z", "N_experiment",
                                  N_experiment);
      current_statement__ = 298;
      validate_non_negative_index("log_conc_enzyme_z", "N_enzyme", N_enzyme);
      current_statement__ = 299;
      validate_non_negative_index("log_conc_phos_z", "N_experiment",
                                  N_experiment);
      current_statement__ = 300;
      validate_non_negative_index("log_conc_phos_z",
                                  "N_phosphorylation_enzymes",
                                  N_phosphorylation_enzymes);
      current_statement__ = 301;
      validate_non_negative_index("log_conc_unbalanced_z", "N_experiment",
                                  N_experiment);
      current_statement__ = 302;
      validate_non_negative_index("log_conc_unbalanced_z", "N_unbalanced",
                                  N_unbalanced);
      current_statement__ = 303;
      validate_non_negative_index("km", "N_km", N_km);
      current_statement__ = 304;
      validate_non_negative_index("ki", "N_ci", N_ci);
      current_statement__ = 305;
      validate_non_negative_index("kcat", "N_enzyme", N_enzyme);
      current_statement__ = 306;
      validate_non_negative_index("diss_t", "N_ai", N_ai);
      current_statement__ = 307;
      validate_non_negative_index("diss_r", "N_aa", N_aa);
      current_statement__ = 308;
      validate_non_negative_index("transfer_constant", "N_ae", N_ae);
      current_statement__ = 309;
      validate_non_negative_index("kcat_phos", "N_phosphorylation_enzymes",
                                  N_phosphorylation_enzymes);
      current_statement__ = 310;
      validate_non_negative_index("psi", "N_experiment", N_experiment);
      current_statement__ = 311;
      validate_non_negative_index("drain", "N_experiment", N_experiment);
      current_statement__ = 312;
      validate_non_negative_index("drain", "N_drain", N_drain);
      current_statement__ = 313;
      validate_non_negative_index("conc_enzyme", "N_experiment", N_experiment);
      current_statement__ = 314;
      validate_non_negative_index("conc_enzyme", "N_enzyme", N_enzyme);
      current_statement__ = 315;
      validate_non_negative_index("conc_unbalanced", "N_experiment",
                                  N_experiment);
      current_statement__ = 316;
      validate_non_negative_index("conc_unbalanced", "N_unbalanced",
                                  N_unbalanced);
      current_statement__ = 317;
      validate_non_negative_index("conc_phos", "N_experiment", N_experiment);
      current_statement__ = 318;
      validate_non_negative_index("conc_phos", "N_phosphorylation_enzymes",
                                  N_phosphorylation_enzymes);
      current_statement__ = 319;
      validate_non_negative_index("conc", "N_experiment", N_experiment);
      current_statement__ = 320;
      validate_non_negative_index("conc", "N_mic", N_mic);
      current_statement__ = 321;
      validate_non_negative_index("flux", "N_experiment", N_experiment);
      current_statement__ = 322;
      validate_non_negative_index("flux", "N_reaction", N_reaction);
      current_statement__ = 323;
      validate_non_negative_index("dgrs", "N_experiment", N_experiment);
      current_statement__ = 324;
      validate_non_negative_index("dgrs", "N_edge", N_edge);
      current_statement__ = 325;
      validate_non_negative_index("yconc_sim", "N_conc_measurement",
                                  N_conc_measurement);
      current_statement__ = 326;
      validate_non_negative_index("yflux_sim", "N_flux_measurement",
                                  N_flux_measurement);
      current_statement__ = 327;
      validate_non_negative_index("log_lik_conc", "N_conc_measurement",
                                  N_conc_measurement);
      current_statement__ = 328;
      validate_non_negative_index("log_lik_flux", "N_flux_measurement",
                                  N_flux_measurement);
      current_statement__ = 329;
      validate_non_negative_index("free_enzyme_ratio", "N_experiment",
                                  N_experiment);
      current_statement__ = 330;
      validate_non_negative_index("free_enzyme_ratio", "N_edge", N_edge);
      current_statement__ = 331;
      validate_non_negative_index("saturation", "N_experiment", N_experiment);
      current_statement__ = 332;
      validate_non_negative_index("saturation", "N_edge", N_edge);
      current_statement__ = 333;
      validate_non_negative_index("allostery", "N_experiment", N_experiment);
      current_statement__ = 334;
      validate_non_negative_index("allostery", "N_edge", N_edge);
      current_statement__ = 335;
      validate_non_negative_index("phosphorylation", "N_experiment",
                                  N_experiment);
      current_statement__ = 336;
      validate_non_negative_index("phosphorylation", "N_edge", N_edge);
      current_statement__ = 337;
      validate_non_negative_index("reversibility", "N_experiment",
                                  N_experiment);
      current_statement__ = 338;
      validate_non_negative_index("reversibility", "N_edge", N_edge);
      current_statement__ = 339;
      validate_non_negative_index("keq", "N_experiment", N_experiment);
      current_statement__ = 340;
      validate_non_negative_index("keq", "N_edge", N_edge);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = N_metabolite + N_enzyme + N_km
       + N_phosphorylation_enzymes + N_ci + N_ai + N_aa + N_ae + N_experiment
       + (N_experiment * N_drain) + (N_experiment * N_enzyme)
       + (N_experiment * N_phosphorylation_enzymes)
       + (N_experiment * N_unbalanced);
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "model_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> dgf;
      dgf = Eigen::Matrix<local_scalar_t__, -1, 1>(N_metabolite);
      stan::math::fill(dgf, DUMMY_VAR__);
      
      current_statement__ = 1;
      dgf = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
              N_metabolite);
      Eigen::Matrix<local_scalar_t__, -1, 1> log_kcat_z;
      log_kcat_z = Eigen::Matrix<local_scalar_t__, -1, 1>(N_enzyme);
      stan::math::fill(log_kcat_z, DUMMY_VAR__);
      
      current_statement__ = 2;
      log_kcat_z = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                     N_enzyme);
      Eigen::Matrix<local_scalar_t__, -1, 1> log_km_z;
      log_km_z = Eigen::Matrix<local_scalar_t__, -1, 1>(N_km);
      stan::math::fill(log_km_z, DUMMY_VAR__);
      
      current_statement__ = 3;
      log_km_z = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                   N_km);
      Eigen::Matrix<local_scalar_t__, -1, 1> log_kcat_phos_z;
      log_kcat_phos_z = Eigen::Matrix<local_scalar_t__, -1, 1>(N_phosphorylation_enzymes);
      stan::math::fill(log_kcat_phos_z, DUMMY_VAR__);
      
      current_statement__ = 4;
      log_kcat_phos_z = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                          N_phosphorylation_enzymes);
      Eigen::Matrix<local_scalar_t__, -1, 1> log_ki_z;
      log_ki_z = Eigen::Matrix<local_scalar_t__, -1, 1>(N_ci);
      stan::math::fill(log_ki_z, DUMMY_VAR__);
      
      current_statement__ = 5;
      log_ki_z = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                   N_ci);
      Eigen::Matrix<local_scalar_t__, -1, 1> log_diss_t_z;
      log_diss_t_z = Eigen::Matrix<local_scalar_t__, -1, 1>(N_ai);
      stan::math::fill(log_diss_t_z, DUMMY_VAR__);
      
      current_statement__ = 6;
      log_diss_t_z = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                       N_ai);
      Eigen::Matrix<local_scalar_t__, -1, 1> log_diss_r_z;
      log_diss_r_z = Eigen::Matrix<local_scalar_t__, -1, 1>(N_aa);
      stan::math::fill(log_diss_r_z, DUMMY_VAR__);
      
      current_statement__ = 7;
      log_diss_r_z = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                       N_aa);
      Eigen::Matrix<local_scalar_t__, -1, 1> log_transfer_constant_z;
      log_transfer_constant_z = Eigen::Matrix<local_scalar_t__, -1, 1>(N_ae);
      stan::math::fill(log_transfer_constant_z, DUMMY_VAR__);
      
      current_statement__ = 8;
      log_transfer_constant_z = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                                  N_ae);
      Eigen::Matrix<local_scalar_t__, -1, 1> psi_z;
      psi_z = Eigen::Matrix<local_scalar_t__, -1, 1>(N_experiment);
      stan::math::fill(psi_z, DUMMY_VAR__);
      
      current_statement__ = 9;
      psi_z = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                N_experiment);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> drain_z;
      drain_z = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N_experiment, Eigen::Matrix<local_scalar_t__, -1, 1>(N_drain));
      stan::math::fill(drain_z, DUMMY_VAR__);
      
      current_statement__ = 10;
      drain_z = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                  N_experiment, N_drain);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> log_conc_enzyme_z;
      log_conc_enzyme_z = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N_experiment, Eigen::Matrix<local_scalar_t__, -1, 1>(N_enzyme));
      stan::math::fill(log_conc_enzyme_z, DUMMY_VAR__);
      
      current_statement__ = 11;
      log_conc_enzyme_z = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                            N_experiment, N_enzyme);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> log_conc_phos_z;
      log_conc_phos_z = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N_experiment, Eigen::Matrix<local_scalar_t__, -1, 1>(N_phosphorylation_enzymes));
      stan::math::fill(log_conc_phos_z, DUMMY_VAR__);
      
      current_statement__ = 12;
      log_conc_phos_z = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                          N_experiment, N_phosphorylation_enzymes);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> log_conc_unbalanced_z;
      log_conc_unbalanced_z = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N_experiment, Eigen::Matrix<local_scalar_t__, -1, 1>(N_unbalanced));
      stan::math::fill(log_conc_unbalanced_z, DUMMY_VAR__);
      
      current_statement__ = 13;
      log_conc_unbalanced_z = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                                N_experiment, N_unbalanced);
      Eigen::Matrix<local_scalar_t__, -1, 1> km;
      km = Eigen::Matrix<local_scalar_t__, -1, 1>(N_km);
      stan::math::fill(km, DUMMY_VAR__);
      
      current_statement__ = 14;
      assign(km, unz_log_1d(priors_km, log_km_z, pstream__),
        "assigning variable km");
      Eigen::Matrix<local_scalar_t__, -1, 1> ki;
      ki = Eigen::Matrix<local_scalar_t__, -1, 1>(N_ci);
      stan::math::fill(ki, DUMMY_VAR__);
      
      current_statement__ = 15;
      assign(ki, unz_log_1d(priors_ki, log_ki_z, pstream__),
        "assigning variable ki");
      Eigen::Matrix<local_scalar_t__, -1, 1> kcat;
      kcat = Eigen::Matrix<local_scalar_t__, -1, 1>(N_enzyme);
      stan::math::fill(kcat, DUMMY_VAR__);
      
      current_statement__ = 16;
      assign(kcat, unz_log_1d(priors_kcat, log_kcat_z, pstream__),
        "assigning variable kcat");
      Eigen::Matrix<local_scalar_t__, -1, 1> diss_t;
      diss_t = Eigen::Matrix<local_scalar_t__, -1, 1>(N_ai);
      stan::math::fill(diss_t, DUMMY_VAR__);
      
      current_statement__ = 17;
      assign(diss_t, unz_log_1d(priors_diss_t, log_diss_t_z, pstream__),
        "assigning variable diss_t");
      Eigen::Matrix<local_scalar_t__, -1, 1> diss_r;
      diss_r = Eigen::Matrix<local_scalar_t__, -1, 1>(N_aa);
      stan::math::fill(diss_r, DUMMY_VAR__);
      
      current_statement__ = 18;
      assign(diss_r, unz_log_1d(priors_diss_r, log_diss_r_z, pstream__),
        "assigning variable diss_r");
      Eigen::Matrix<local_scalar_t__, -1, 1> transfer_constant;
      transfer_constant = Eigen::Matrix<local_scalar_t__, -1, 1>(N_ae);
      stan::math::fill(transfer_constant, DUMMY_VAR__);
      
      current_statement__ = 19;
      assign(transfer_constant,
        unz_log_1d(priors_transfer_constant,
          log_transfer_constant_z, pstream__),
        "assigning variable transfer_constant");
      Eigen::Matrix<local_scalar_t__, -1, 1> kcat_phos;
      kcat_phos = Eigen::Matrix<local_scalar_t__, -1, 1>(N_phosphorylation_enzymes);
      stan::math::fill(kcat_phos, DUMMY_VAR__);
      
      current_statement__ = 20;
      assign(kcat_phos,
        unz_log_1d(priors_kcat_phos, log_kcat_phos_z, pstream__),
        "assigning variable kcat_phos");
      Eigen::Matrix<local_scalar_t__, -1, 1> psi;
      psi = Eigen::Matrix<local_scalar_t__, -1, 1>(N_experiment);
      stan::math::fill(psi, DUMMY_VAR__);
      
      current_statement__ = 21;
      assign(psi, unz_1d(priors_psi, psi_z, pstream__),
        "assigning variable psi");
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> drain;
      drain = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N_experiment, Eigen::Matrix<local_scalar_t__, -1, 1>(N_drain));
      stan::math::fill(drain, DUMMY_VAR__);
      
      current_statement__ = 22;
      assign(drain, unz_2d(priors_drain, drain_z, pstream__),
        "assigning variable drain");
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> conc_enzyme;
      conc_enzyme = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N_experiment, Eigen::Matrix<local_scalar_t__, -1, 1>(N_enzyme));
      stan::math::fill(conc_enzyme, DUMMY_VAR__);
      
      current_statement__ = 23;
      assign(conc_enzyme,
        unz_log_2d(priors_conc_enzyme, log_conc_enzyme_z, pstream__),
        "assigning variable conc_enzyme");
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> conc_unbalanced;
      conc_unbalanced = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N_experiment, Eigen::Matrix<local_scalar_t__, -1, 1>(N_unbalanced));
      stan::math::fill(conc_unbalanced, DUMMY_VAR__);
      
      current_statement__ = 24;
      assign(conc_unbalanced,
        unz_log_2d(priors_conc_unbalanced, log_conc_unbalanced_z, pstream__),
        "assigning variable conc_unbalanced");
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> conc_phos;
      conc_phos = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N_experiment, Eigen::Matrix<local_scalar_t__, -1, 1>(N_phosphorylation_enzymes));
      stan::math::fill(conc_phos, DUMMY_VAR__);
      
      current_statement__ = 25;
      assign(conc_phos,
        unz_log_2d(priors_conc_phos, log_conc_phos_z, pstream__),
        "assigning variable conc_phos");
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> conc;
      conc = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N_experiment, Eigen::Matrix<local_scalar_t__, -1, 1>(N_mic));
      stan::math::fill(conc, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> flux;
      flux = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N_experiment, Eigen::Matrix<local_scalar_t__, -1, 1>(N_reaction));
      stan::math::fill(flux, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> dgrs;
      dgrs = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N_experiment, Eigen::Matrix<local_scalar_t__, -1, 1>(N_edge));
      stan::math::fill(dgrs, DUMMY_VAR__);
      
      current_statement__ = 64;
      for (int e = 1; e <= N_experiment; ++e) {
        current_statement__ = 29;
        assign(dgrs,
          get_dgrs(S, dgf, rvalue(temperature, "temperature", index_uni(e)),
            mic_to_met, water_stoichiometry, transported_charge,
            rvalue(psi, "psi", index_uni(e)), pstream__),
          "assigning variable dgrs", index_uni(e));
        current_statement__ = 30;
        assign(flux, rep_vector(0, N_reaction),
          "assigning variable flux", index_uni(e));
        current_statement__ = 31;
        validate_non_negative_index("conc_enzyme_experiment", "N_enzyme",
                                    N_enzyme);
        Eigen::Matrix<local_scalar_t__, -1, 1> conc_enzyme_experiment;
        conc_enzyme_experiment = Eigen::Matrix<local_scalar_t__, -1, 1>(N_enzyme);
        stan::math::fill(conc_enzyme_experiment, DUMMY_VAR__);
        
        current_statement__ = 32;
        assign(conc_enzyme_experiment,
          elt_multiply(rvalue(conc_enzyme, "conc_enzyme", index_uni(e)),
            transpose(rvalue(knockout, "knockout", index_uni(e)))),
          "assigning variable conc_enzyme_experiment");
        current_statement__ = 33;
        validate_non_negative_index("conc_phos_experiment",
                                    "N_phosphorylation_enzymes",
                                    N_phosphorylation_enzymes);
        Eigen::Matrix<local_scalar_t__, -1, 1> conc_phos_experiment;
        conc_phos_experiment = Eigen::Matrix<local_scalar_t__, -1, 1>(N_phosphorylation_enzymes);
        stan::math::fill(conc_phos_experiment, DUMMY_VAR__);
        
        current_statement__ = 34;
        assign(conc_phos_experiment,
          elt_multiply(rvalue(conc_phos, "conc_phos", index_uni(e)),
            transpose(rvalue(phos_knockout, "phos_knockout", index_uni(e)))),
          "assigning variable conc_phos_experiment");
        current_statement__ = 35;
        validate_non_negative_index("conc_balanced", "N_mic - N_unbalanced",
                                    (N_mic - N_unbalanced));
        std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> conc_balanced;
        conc_balanced = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(1, Eigen::Matrix<local_scalar_t__, -1, 1>(
          (N_mic - N_unbalanced)));
        stan::math::fill(conc_balanced, DUMMY_VAR__);
        
        current_statement__ = 36;
        assign(conc_balanced,
          ode_bdf_tol(dbalanced_dt_odefunctor__(),
            rvalue(conc_init, "conc_init",
              index_uni(e), index_multi(balanced_mic_ix)), initial_time,
            std::vector<double>{timepoint}, rel_tol, abs_tol, max_num_steps,
            pstream__,
            rvalue(conc_unbalanced, "conc_unbalanced", index_uni(e)),
            balanced_mic_ix, unbalanced_mic_ix, conc_enzyme_experiment,
            rvalue(dgrs, "dgrs", index_uni(e)), kcat, km, ki,
            transfer_constant, diss_t, diss_r, kcat_phos,
            conc_phos_experiment, rvalue(drain, "drain", index_uni(e)),
            rvalue(temperature, "temperature", index_uni(e)),
            drain_small_conc_corrector, S, subunits, edge_type,
            edge_to_enzyme, edge_to_tc, edge_to_drain, km_lookup, ki_lookup,
            dt_lookup, dr_lookup, sub_by_edge_long, sub_by_edge_bounds,
            prod_by_edge_long, prod_by_edge_bounds, ci_by_edge_long,
            ci_by_edge_bounds, ai_ix_long, ai_ix_bounds, aa_ix_long,
            aa_ix_bounds, pa_ix_long, pa_ix_bounds, pi_ix_long, pi_ix_bounds),
          "assigning variable conc_balanced");
        current_statement__ = 37;
        assign(conc, rvalue(conc_balanced, "conc_balanced", index_uni(1)),
          "assigning variable conc", index_uni(e),
                                       index_multi(balanced_mic_ix));
        current_statement__ = 38;
        assign(conc,
          rvalue(conc_unbalanced, "conc_unbalanced", index_uni(e)),
          "assigning variable conc", index_uni(e),
                                       index_multi(unbalanced_mic_ix));
        {
          current_statement__ = 39;
          validate_non_negative_index("edge_flux", "N_edge", N_edge);
          Eigen::Matrix<local_scalar_t__, -1, 1> edge_flux;
          edge_flux = Eigen::Matrix<local_scalar_t__, -1, 1>(N_edge);
          stan::math::fill(edge_flux, DUMMY_VAR__);
          
          current_statement__ = 40;
          assign(edge_flux,
            get_edge_flux(rvalue(conc, "conc", index_uni(e)),
              conc_enzyme_experiment, rvalue(dgrs, "dgrs", index_uni(e)),
              kcat, km, ki, transfer_constant, diss_t, diss_r, kcat_phos,
              conc_phos_experiment, rvalue(drain, "drain", index_uni(e)),
              rvalue(temperature, "temperature", index_uni(e)),
              drain_small_conc_corrector, S, subunits, edge_type,
              edge_to_enzyme, edge_to_tc, edge_to_drain, km_lookup,
              ki_lookup, dt_lookup, dr_lookup, sub_by_edge_long,
              sub_by_edge_bounds, prod_by_edge_long, prod_by_edge_bounds,
              ci_by_edge_long, ci_by_edge_bounds, ai_ix_long, ai_ix_bounds,
              aa_ix_long, aa_ix_bounds, pa_ix_long, pa_ix_bounds, pi_ix_long,
              pi_ix_bounds, pstream__), "assigning variable edge_flux");
          current_statement__ = 42;
          for (int j = 1; j <= N_edge; ++j) {
            current_statement__ = 41;
            assign(flux,
              (rvalue(flux, "flux",
                 index_uni(e),
                   index_uni(rvalue(edge_to_reaction, "edge_to_reaction",
                               index_uni(j)))) +
                rvalue(edge_flux, "edge_flux", index_uni(j))),
              "assigning variable flux", index_uni(e),
                                           index_uni(rvalue(edge_to_reaction,
                                                       "edge_to_reaction",
                                                       index_uni(j))));
          }
          current_statement__ = 61;
          if ((primitive_value(logical_eq(reject_non_steady, 1)) &&
              primitive_value(
              logical_eq(
                check_steady_state(
                  rvalue(multiply(S, edge_flux), "(S * edge_flux)",
                    index_multi(balanced_mic_ix)),
                  rvalue(conc_balanced, "conc_balanced", index_uni(1)),
                  steady_state_threshold_abs,
                  steady_state_threshold_rel, pstream__), 0)))) {
            current_statement__ = 43;
            if (pstream__) {
              stan_print(pstream__, "Non-steady state in experiment ");
              stan_print(pstream__, e);
              stan_print(pstream__, "\n");
            }
            current_statement__ = 44;
            if (pstream__) {
              stan_print(pstream__, "Balanced metabolite concentration");
              stan_print(pstream__, rvalue(conc_balanced, "conc_balanced",
                                      index_uni(1)));
              stan_print(pstream__, "\n");
            }
            current_statement__ = 45;
            if (pstream__) {
              stan_print(pstream__, "flux: ");
              stan_print(pstream__, flux);
              stan_print(pstream__, "\n");
            }
            current_statement__ = 46;
            if (pstream__) {
              stan_print(pstream__, "conc_init: ");
              stan_print(pstream__, conc_init);
              stan_print(pstream__, "\n");
            }
            current_statement__ = 47;
            if (pstream__) {
              stan_print(pstream__, "conc_unbalanced: ");
              stan_print(pstream__, rvalue(conc_unbalanced,
                                      "conc_unbalanced", index_uni(e)));
              stan_print(pstream__, "\n");
            }
            current_statement__ = 48;
            if (pstream__) {
              stan_print(pstream__, "conc_enzyme_experiment: ");
              stan_print(pstream__, conc_enzyme_experiment);
              stan_print(pstream__, "\n");
            }
            current_statement__ = 49;
            if (pstream__) {
              stan_print(pstream__, "km: ");
              stan_print(pstream__, km);
              stan_print(pstream__, "\n");
            }
            current_statement__ = 50;
            if (pstream__) {
              stan_print(pstream__, "drain: ");
              stan_print(pstream__, rvalue(drain, "drain", index_uni(e)));
              stan_print(pstream__, "\n");
            }
            current_statement__ = 51;
            if (pstream__) {
              stan_print(pstream__, "kcat: ");
              stan_print(pstream__, kcat);
              stan_print(pstream__, "\n");
            }
            current_statement__ = 52;
            if (pstream__) {
              stan_print(pstream__, "dgrs: ");
              stan_print(pstream__, rvalue(dgrs, "dgrs", index_uni(e)));
              stan_print(pstream__, "\n");
            }
            current_statement__ = 53;
            if (pstream__) {
              stan_print(pstream__, "ki: ");
              stan_print(pstream__, ki);
              stan_print(pstream__, "\n");
            }
            current_statement__ = 54;
            if (pstream__) {
              stan_print(pstream__, "diss_t: ");
              stan_print(pstream__, diss_t);
              stan_print(pstream__, "\n");
            }
            current_statement__ = 55;
            if (pstream__) {
              stan_print(pstream__, "diss_r: ");
              stan_print(pstream__, diss_r);
              stan_print(pstream__, "\n");
            }
            current_statement__ = 56;
            if (pstream__) {
              stan_print(pstream__, "transfer_constant: ");
              stan_print(pstream__, transfer_constant);
              stan_print(pstream__, "\n");
            }
            current_statement__ = 57;
            if (pstream__) {
              stan_print(pstream__, "kcat_phos: ");
              stan_print(pstream__, kcat_phos);
              stan_print(pstream__, "\n");
            }
            current_statement__ = 58;
            if (pstream__) {
              stan_print(pstream__, "conc_phos_experiment: ");
              stan_print(pstream__, conc_phos_experiment);
              stan_print(pstream__, "\n");
            }
            current_statement__ = 59;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Rejecting";
            throw std::domain_error(errmsg_stream__.str());
          } 
        }
      }
      current_statement__ = 26;
      for (int sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 26;
        for (int sym2__ = 1; sym2__ <= N_mic; ++sym2__) {
          current_statement__ = 26;
          check_greater_or_equal(function__, "conc[sym1__, sym2__]",
                                 conc[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      {
        current_statement__ = 91;
        lp_accum__.add(std_normal_lpdf<propto__>(log_kcat_z));
        current_statement__ = 92;
        lp_accum__.add(std_normal_lpdf<propto__>(log_km_z));
        current_statement__ = 93;
        lp_accum__.add(std_normal_lpdf<propto__>(log_ki_z));
        current_statement__ = 94;
        lp_accum__.add(std_normal_lpdf<propto__>(log_diss_t_z));
        current_statement__ = 95;
        lp_accum__.add(std_normal_lpdf<propto__>(log_diss_r_z));
        current_statement__ = 96;
        lp_accum__.add(std_normal_lpdf<propto__>(log_transfer_constant_z));
        current_statement__ = 97;
        lp_accum__.add(
          multi_normal_cholesky_lpdf<propto__>(dgf, prior_loc_dgf,
            prior_cov_dgf_chol));
        current_statement__ = 98;
        lp_accum__.add(std_normal_lpdf<propto__>(log_kcat_phos_z));
        current_statement__ = 105;
        for (int ex = 1; ex <= N_experiment; ++ex) {
          current_statement__ = 99;
          lp_accum__.add(
            std_normal_lpdf<propto__>(
              rvalue(log_conc_unbalanced_z, "log_conc_unbalanced_z",
                index_uni(ex))));
          current_statement__ = 100;
          lp_accum__.add(
            std_normal_lpdf<propto__>(
              rvalue(log_conc_enzyme_z, "log_conc_enzyme_z", index_uni(ex))));
          current_statement__ = 101;
          lp_accum__.add(
            std_normal_lpdf<propto__>(
              rvalue(log_conc_phos_z, "log_conc_phos_z", index_uni(ex))));
          current_statement__ = 102;
          lp_accum__.add(
            std_normal_lpdf<propto__>(
              rvalue(drain_z, "drain_z", index_uni(ex))));
          current_statement__ = 103;
          lp_accum__.add(
            std_normal_lpdf<propto__>(rvalue(psi_z, "psi_z", index_uni(ex))));
        }
        current_statement__ = 113;
        if (logical_eq(LIKELIHOOD, 1)) {
          current_statement__ = 107;
          for (int c = 1; c <= N_conc_measurement; ++c) {
            current_statement__ = 106;
            lp_accum__.add(
              lognormal_lpdf<propto__>(rvalue(yconc, "yconc", index_uni(c)),
                stan::math::log(
                  rvalue(conc, "conc",
                    index_uni(rvalue(experiment_yconc, "experiment_yconc",
                                index_uni(c))),
                      index_uni(rvalue(mic_ix_yconc, "mic_ix_yconc",
                                  index_uni(c))))),
                rvalue(sigma_conc, "sigma_conc", index_uni(c))));
          }
          current_statement__ = 109;
          for (int e = 1; e <= N_enzyme_measurement; ++e) {
            current_statement__ = 108;
            lp_accum__.add(
              lognormal_lpdf<propto__>(rvalue(yenz, "yenz", index_uni(e)),
                stan::math::log(
                  rvalue(conc_enzyme, "conc_enzyme",
                    index_uni(rvalue(experiment_yenz, "experiment_yenz",
                                index_uni(e))),
                      index_uni(rvalue(enzyme_yenz, "enzyme_yenz",
                                  index_uni(e))))),
                rvalue(sigma_enz, "sigma_enz", index_uni(e))));
          }
          current_statement__ = 111;
          for (int f = 1; f <= N_flux_measurement; ++f) {
            current_statement__ = 110;
            lp_accum__.add(
              normal_lpdf<propto__>(rvalue(yflux, "yflux", index_uni(f)),
                rvalue(flux, "flux",
                  index_uni(rvalue(experiment_yflux, "experiment_yflux",
                              index_uni(f))),
                    index_uni(rvalue(reaction_yflux, "reaction_yflux",
                                index_uni(f)))),
                rvalue(sigma_flux, "sigma_flux", index_uni(f))));
          }
        } 
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "model_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> dgf;
      dgf = Eigen::Matrix<double, -1, 1>(N_metabolite);
      stan::math::fill(dgf, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      dgf = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
              N_metabolite);
      Eigen::Matrix<double, -1, 1> log_kcat_z;
      log_kcat_z = Eigen::Matrix<double, -1, 1>(N_enzyme);
      stan::math::fill(log_kcat_z, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      log_kcat_z = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                     N_enzyme);
      Eigen::Matrix<double, -1, 1> log_km_z;
      log_km_z = Eigen::Matrix<double, -1, 1>(N_km);
      stan::math::fill(log_km_z, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      log_km_z = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                   N_km);
      Eigen::Matrix<double, -1, 1> log_kcat_phos_z;
      log_kcat_phos_z = Eigen::Matrix<double, -1, 1>(N_phosphorylation_enzymes);
      stan::math::fill(log_kcat_phos_z, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 4;
      log_kcat_phos_z = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                          N_phosphorylation_enzymes);
      Eigen::Matrix<double, -1, 1> log_ki_z;
      log_ki_z = Eigen::Matrix<double, -1, 1>(N_ci);
      stan::math::fill(log_ki_z, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      log_ki_z = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                   N_ci);
      Eigen::Matrix<double, -1, 1> log_diss_t_z;
      log_diss_t_z = Eigen::Matrix<double, -1, 1>(N_ai);
      stan::math::fill(log_diss_t_z, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 6;
      log_diss_t_z = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                       N_ai);
      Eigen::Matrix<double, -1, 1> log_diss_r_z;
      log_diss_r_z = Eigen::Matrix<double, -1, 1>(N_aa);
      stan::math::fill(log_diss_r_z, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 7;
      log_diss_r_z = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                       N_aa);
      Eigen::Matrix<double, -1, 1> log_transfer_constant_z;
      log_transfer_constant_z = Eigen::Matrix<double, -1, 1>(N_ae);
      stan::math::fill(log_transfer_constant_z, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 8;
      log_transfer_constant_z = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                                  N_ae);
      Eigen::Matrix<double, -1, 1> psi_z;
      psi_z = Eigen::Matrix<double, -1, 1>(N_experiment);
      stan::math::fill(psi_z, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      psi_z = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                N_experiment);
      std::vector<Eigen::Matrix<double, -1, 1>> drain_z;
      drain_z = std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_drain));
      stan::math::fill(drain_z, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      drain_z = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                  N_experiment, N_drain);
      std::vector<Eigen::Matrix<double, -1, 1>> log_conc_enzyme_z;
      log_conc_enzyme_z = std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_enzyme));
      stan::math::fill(log_conc_enzyme_z, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 11;
      log_conc_enzyme_z = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                            N_experiment, N_enzyme);
      std::vector<Eigen::Matrix<double, -1, 1>> log_conc_phos_z;
      log_conc_phos_z = std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_phosphorylation_enzymes));
      stan::math::fill(log_conc_phos_z, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 12;
      log_conc_phos_z = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                          N_experiment, N_phosphorylation_enzymes);
      std::vector<Eigen::Matrix<double, -1, 1>> log_conc_unbalanced_z;
      log_conc_unbalanced_z = std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_unbalanced));
      stan::math::fill(log_conc_unbalanced_z, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 13;
      log_conc_unbalanced_z = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                                N_experiment, N_unbalanced);
      Eigen::Matrix<double, -1, 1> km;
      km = Eigen::Matrix<double, -1, 1>(N_km);
      stan::math::fill(km, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> ki;
      ki = Eigen::Matrix<double, -1, 1>(N_ci);
      stan::math::fill(ki, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> kcat;
      kcat = Eigen::Matrix<double, -1, 1>(N_enzyme);
      stan::math::fill(kcat, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> diss_t;
      diss_t = Eigen::Matrix<double, -1, 1>(N_ai);
      stan::math::fill(diss_t, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> diss_r;
      diss_r = Eigen::Matrix<double, -1, 1>(N_aa);
      stan::math::fill(diss_r, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> transfer_constant;
      transfer_constant = Eigen::Matrix<double, -1, 1>(N_ae);
      stan::math::fill(transfer_constant, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> kcat_phos;
      kcat_phos = Eigen::Matrix<double, -1, 1>(N_phosphorylation_enzymes);
      stan::math::fill(kcat_phos, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> psi;
      psi = Eigen::Matrix<double, -1, 1>(N_experiment);
      stan::math::fill(psi, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> drain;
      drain = std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_drain));
      stan::math::fill(drain, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> conc_enzyme;
      conc_enzyme = std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_enzyme));
      stan::math::fill(conc_enzyme, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> conc_unbalanced;
      conc_unbalanced = std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_unbalanced));
      stan::math::fill(conc_unbalanced, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<Eigen::Matrix<double, -1, 1>> conc_phos;
      conc_phos = std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_phosphorylation_enzymes));
      stan::math::fill(conc_phos, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> conc;
      conc = std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_mic));
      stan::math::fill(conc, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> flux;
      flux = std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_reaction));
      stan::math::fill(flux, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> dgrs;
      dgrs = std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_edge));
      stan::math::fill(dgrs, std::numeric_limits<double>::quiet_NaN());
      
      out__.write(dgf);
      out__.write(log_kcat_z);
      out__.write(log_km_z);
      out__.write(log_kcat_phos_z);
      out__.write(log_ki_z);
      out__.write(log_diss_t_z);
      out__.write(log_diss_r_z);
      out__.write(log_transfer_constant_z);
      out__.write(psi_z);
      for (int sym1__ = 1; sym1__ <= N_drain; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          out__.write(drain_z[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          out__.write(log_conc_enzyme_z[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_phosphorylation_enzymes; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          out__.write(log_conc_phos_z[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          out__.write(log_conc_unbalanced_z[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 14;
      assign(km, unz_log_1d(priors_km, log_km_z, pstream__),
        "assigning variable km");
      current_statement__ = 15;
      assign(ki, unz_log_1d(priors_ki, log_ki_z, pstream__),
        "assigning variable ki");
      current_statement__ = 16;
      assign(kcat, unz_log_1d(priors_kcat, log_kcat_z, pstream__),
        "assigning variable kcat");
      current_statement__ = 17;
      assign(diss_t, unz_log_1d(priors_diss_t, log_diss_t_z, pstream__),
        "assigning variable diss_t");
      current_statement__ = 18;
      assign(diss_r, unz_log_1d(priors_diss_r, log_diss_r_z, pstream__),
        "assigning variable diss_r");
      current_statement__ = 19;
      assign(transfer_constant,
        unz_log_1d(priors_transfer_constant,
          log_transfer_constant_z, pstream__),
        "assigning variable transfer_constant");
      current_statement__ = 20;
      assign(kcat_phos,
        unz_log_1d(priors_kcat_phos, log_kcat_phos_z, pstream__),
        "assigning variable kcat_phos");
      current_statement__ = 21;
      assign(psi, unz_1d(priors_psi, psi_z, pstream__),
        "assigning variable psi");
      current_statement__ = 22;
      assign(drain, unz_2d(priors_drain, drain_z, pstream__),
        "assigning variable drain");
      current_statement__ = 23;
      assign(conc_enzyme,
        unz_log_2d(priors_conc_enzyme, log_conc_enzyme_z, pstream__),
        "assigning variable conc_enzyme");
      current_statement__ = 24;
      assign(conc_unbalanced,
        unz_log_2d(priors_conc_unbalanced, log_conc_unbalanced_z, pstream__),
        "assigning variable conc_unbalanced");
      current_statement__ = 25;
      assign(conc_phos,
        unz_log_2d(priors_conc_phos, log_conc_phos_z, pstream__),
        "assigning variable conc_phos");
      current_statement__ = 64;
      for (int e = 1; e <= N_experiment; ++e) {
        current_statement__ = 29;
        assign(dgrs,
          get_dgrs(S, dgf, rvalue(temperature, "temperature", index_uni(e)),
            mic_to_met, water_stoichiometry, transported_charge,
            rvalue(psi, "psi", index_uni(e)), pstream__),
          "assigning variable dgrs", index_uni(e));
        current_statement__ = 30;
        assign(flux, rep_vector(0, N_reaction),
          "assigning variable flux", index_uni(e));
        current_statement__ = 31;
        validate_non_negative_index("conc_enzyme_experiment", "N_enzyme",
                                    N_enzyme);
        Eigen::Matrix<double, -1, 1> conc_enzyme_experiment;
        conc_enzyme_experiment = Eigen::Matrix<double, -1, 1>(N_enzyme);
        stan::math::fill(conc_enzyme_experiment, std::numeric_limits<double>::quiet_NaN());
        
        
        current_statement__ = 32;
        assign(conc_enzyme_experiment,
          elt_multiply(rvalue(conc_enzyme, "conc_enzyme", index_uni(e)),
            transpose(rvalue(knockout, "knockout", index_uni(e)))),
          "assigning variable conc_enzyme_experiment");
        current_statement__ = 33;
        validate_non_negative_index("conc_phos_experiment",
                                    "N_phosphorylation_enzymes",
                                    N_phosphorylation_enzymes);
        Eigen::Matrix<double, -1, 1> conc_phos_experiment;
        conc_phos_experiment = Eigen::Matrix<double, -1, 1>(N_phosphorylation_enzymes);
        stan::math::fill(conc_phos_experiment, std::numeric_limits<double>::quiet_NaN());
        
        
        current_statement__ = 34;
        assign(conc_phos_experiment,
          elt_multiply(rvalue(conc_phos, "conc_phos", index_uni(e)),
            transpose(rvalue(phos_knockout, "phos_knockout", index_uni(e)))),
          "assigning variable conc_phos_experiment");
        current_statement__ = 35;
        validate_non_negative_index("conc_balanced", "N_mic - N_unbalanced",
                                    (N_mic - N_unbalanced));
        std::vector<Eigen::Matrix<double, -1, 1>> conc_balanced;
        conc_balanced = std::vector<Eigen::Matrix<double, -1, 1>>(1, Eigen::Matrix<double, -1, 1>(
          (N_mic - N_unbalanced)));
        stan::math::fill(conc_balanced, std::numeric_limits<double>::quiet_NaN());
        
        
        current_statement__ = 36;
        assign(conc_balanced,
          ode_bdf_tol(dbalanced_dt_odefunctor__(),
            rvalue(conc_init, "conc_init",
              index_uni(e), index_multi(balanced_mic_ix)), initial_time,
            std::vector<double>{timepoint}, rel_tol, abs_tol, max_num_steps,
            pstream__,
            rvalue(conc_unbalanced, "conc_unbalanced", index_uni(e)),
            balanced_mic_ix, unbalanced_mic_ix, conc_enzyme_experiment,
            rvalue(dgrs, "dgrs", index_uni(e)), kcat, km, ki,
            transfer_constant, diss_t, diss_r, kcat_phos,
            conc_phos_experiment, rvalue(drain, "drain", index_uni(e)),
            rvalue(temperature, "temperature", index_uni(e)),
            drain_small_conc_corrector, S, subunits, edge_type,
            edge_to_enzyme, edge_to_tc, edge_to_drain, km_lookup, ki_lookup,
            dt_lookup, dr_lookup, sub_by_edge_long, sub_by_edge_bounds,
            prod_by_edge_long, prod_by_edge_bounds, ci_by_edge_long,
            ci_by_edge_bounds, ai_ix_long, ai_ix_bounds, aa_ix_long,
            aa_ix_bounds, pa_ix_long, pa_ix_bounds, pi_ix_long, pi_ix_bounds),
          "assigning variable conc_balanced");
        current_statement__ = 37;
        assign(conc, rvalue(conc_balanced, "conc_balanced", index_uni(1)),
          "assigning variable conc", index_uni(e),
                                       index_multi(balanced_mic_ix));
        current_statement__ = 38;
        assign(conc,
          rvalue(conc_unbalanced, "conc_unbalanced", index_uni(e)),
          "assigning variable conc", index_uni(e),
                                       index_multi(unbalanced_mic_ix));
        {
          current_statement__ = 39;
          validate_non_negative_index("edge_flux", "N_edge", N_edge);
          Eigen::Matrix<double, -1, 1> edge_flux;
          edge_flux = Eigen::Matrix<double, -1, 1>(N_edge);
          stan::math::fill(edge_flux, std::numeric_limits<double>::quiet_NaN());
          
          
          current_statement__ = 40;
          assign(edge_flux,
            get_edge_flux(rvalue(conc, "conc", index_uni(e)),
              conc_enzyme_experiment, rvalue(dgrs, "dgrs", index_uni(e)),
              kcat, km, ki, transfer_constant, diss_t, diss_r, kcat_phos,
              conc_phos_experiment, rvalue(drain, "drain", index_uni(e)),
              rvalue(temperature, "temperature", index_uni(e)),
              drain_small_conc_corrector, S, subunits, edge_type,
              edge_to_enzyme, edge_to_tc, edge_to_drain, km_lookup,
              ki_lookup, dt_lookup, dr_lookup, sub_by_edge_long,
              sub_by_edge_bounds, prod_by_edge_long, prod_by_edge_bounds,
              ci_by_edge_long, ci_by_edge_bounds, ai_ix_long, ai_ix_bounds,
              aa_ix_long, aa_ix_bounds, pa_ix_long, pa_ix_bounds, pi_ix_long,
              pi_ix_bounds, pstream__), "assigning variable edge_flux");
          current_statement__ = 42;
          for (int j = 1; j <= N_edge; ++j) {
            current_statement__ = 41;
            assign(flux,
              (rvalue(flux, "flux",
                 index_uni(e),
                   index_uni(rvalue(edge_to_reaction, "edge_to_reaction",
                               index_uni(j)))) +
                rvalue(edge_flux, "edge_flux", index_uni(j))),
              "assigning variable flux", index_uni(e),
                                           index_uni(rvalue(edge_to_reaction,
                                                       "edge_to_reaction",
                                                       index_uni(j))));
          }
          current_statement__ = 61;
          if ((primitive_value(logical_eq(reject_non_steady, 1)) &&
              primitive_value(
              logical_eq(
                check_steady_state(
                  rvalue(multiply(S, edge_flux), "(S * edge_flux)",
                    index_multi(balanced_mic_ix)),
                  rvalue(conc_balanced, "conc_balanced", index_uni(1)),
                  steady_state_threshold_abs,
                  steady_state_threshold_rel, pstream__), 0)))) {
            current_statement__ = 43;
            if (pstream__) {
              stan_print(pstream__, "Non-steady state in experiment ");
              stan_print(pstream__, e);
              stan_print(pstream__, "\n");
            }
            current_statement__ = 44;
            if (pstream__) {
              stan_print(pstream__, "Balanced metabolite concentration");
              stan_print(pstream__, rvalue(conc_balanced, "conc_balanced",
                                      index_uni(1)));
              stan_print(pstream__, "\n");
            }
            current_statement__ = 45;
            if (pstream__) {
              stan_print(pstream__, "flux: ");
              stan_print(pstream__, flux);
              stan_print(pstream__, "\n");
            }
            current_statement__ = 46;
            if (pstream__) {
              stan_print(pstream__, "conc_init: ");
              stan_print(pstream__, conc_init);
              stan_print(pstream__, "\n");
            }
            current_statement__ = 47;
            if (pstream__) {
              stan_print(pstream__, "conc_unbalanced: ");
              stan_print(pstream__, rvalue(conc_unbalanced,
                                      "conc_unbalanced", index_uni(e)));
              stan_print(pstream__, "\n");
            }
            current_statement__ = 48;
            if (pstream__) {
              stan_print(pstream__, "conc_enzyme_experiment: ");
              stan_print(pstream__, conc_enzyme_experiment);
              stan_print(pstream__, "\n");
            }
            current_statement__ = 49;
            if (pstream__) {
              stan_print(pstream__, "km: ");
              stan_print(pstream__, km);
              stan_print(pstream__, "\n");
            }
            current_statement__ = 50;
            if (pstream__) {
              stan_print(pstream__, "drain: ");
              stan_print(pstream__, rvalue(drain, "drain", index_uni(e)));
              stan_print(pstream__, "\n");
            }
            current_statement__ = 51;
            if (pstream__) {
              stan_print(pstream__, "kcat: ");
              stan_print(pstream__, kcat);
              stan_print(pstream__, "\n");
            }
            current_statement__ = 52;
            if (pstream__) {
              stan_print(pstream__, "dgrs: ");
              stan_print(pstream__, rvalue(dgrs, "dgrs", index_uni(e)));
              stan_print(pstream__, "\n");
            }
            current_statement__ = 53;
            if (pstream__) {
              stan_print(pstream__, "ki: ");
              stan_print(pstream__, ki);
              stan_print(pstream__, "\n");
            }
            current_statement__ = 54;
            if (pstream__) {
              stan_print(pstream__, "diss_t: ");
              stan_print(pstream__, diss_t);
              stan_print(pstream__, "\n");
            }
            current_statement__ = 55;
            if (pstream__) {
              stan_print(pstream__, "diss_r: ");
              stan_print(pstream__, diss_r);
              stan_print(pstream__, "\n");
            }
            current_statement__ = 56;
            if (pstream__) {
              stan_print(pstream__, "transfer_constant: ");
              stan_print(pstream__, transfer_constant);
              stan_print(pstream__, "\n");
            }
            current_statement__ = 57;
            if (pstream__) {
              stan_print(pstream__, "kcat_phos: ");
              stan_print(pstream__, kcat_phos);
              stan_print(pstream__, "\n");
            }
            current_statement__ = 58;
            if (pstream__) {
              stan_print(pstream__, "conc_phos_experiment: ");
              stan_print(pstream__, conc_phos_experiment);
              stan_print(pstream__, "\n");
            }
            current_statement__ = 59;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "Rejecting";
            throw std::domain_error(errmsg_stream__.str());
          } 
        }
      }
      current_statement__ = 26;
      for (int sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        current_statement__ = 26;
        for (int sym2__ = 1; sym2__ <= N_mic; ++sym2__) {
          current_statement__ = 26;
          check_greater_or_equal(function__, "conc[sym1__, sym2__]",
                                 conc[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      if (emit_transformed_parameters__) {
        out__.write(km);
        out__.write(ki);
        out__.write(kcat);
        out__.write(diss_t);
        out__.write(diss_r);
        out__.write(transfer_constant);
        out__.write(kcat_phos);
        out__.write(psi);
        for (int sym1__ = 1; sym1__ <= N_drain; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            out__.write(drain[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            out__.write(conc_enzyme[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            out__.write(conc_unbalanced[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= N_phosphorylation_enzymes; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            out__.write(conc_phos[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            out__.write(conc[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= N_reaction; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            out__.write(flux[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            out__.write(dgrs[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> yconc_sim;
      yconc_sim = Eigen::Matrix<double, -1, 1>(N_conc_measurement);
      stan::math::fill(yconc_sim, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> yflux_sim;
      yflux_sim = Eigen::Matrix<double, -1, 1>(N_flux_measurement);
      stan::math::fill(yflux_sim, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik_conc;
      log_lik_conc = Eigen::Matrix<double, -1, 1>(N_conc_measurement);
      stan::math::fill(log_lik_conc, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, 1> log_lik_flux;
      log_lik_flux = Eigen::Matrix<double, -1, 1>(N_flux_measurement);
      stan::math::fill(log_lik_flux, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<Eigen::Matrix<double, -1, 1>> free_enzyme_ratio;
      free_enzyme_ratio = std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_edge));
      stan::math::fill(free_enzyme_ratio, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<Eigen::Matrix<double, -1, 1>> saturation;
      saturation = std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_edge));
      stan::math::fill(saturation, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> allostery;
      allostery = std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_edge));
      stan::math::fill(allostery, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> phosphorylation;
      phosphorylation = std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_edge));
      stan::math::fill(phosphorylation, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<Eigen::Matrix<double, -1, 1>> reversibility;
      reversibility = std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_edge));
      stan::math::fill(reversibility, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<Eigen::Matrix<double, -1, 1>> keq;
      keq = std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, Eigen::Matrix<double, -1, 1>(N_edge));
      stan::math::fill(keq, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 78;
      for (int c = 1; c <= N_conc_measurement; ++c) {
        current_statement__ = 75;
        assign(yconc_sim,
          lognormal_rng(
            stan::math::log(
              rvalue(conc, "conc",
                index_uni(rvalue(experiment_yconc, "experiment_yconc",
                            index_uni(c))),
                  index_uni(rvalue(mic_ix_yconc, "mic_ix_yconc",
                              index_uni(c))))),
            rvalue(sigma_conc, "sigma_conc", index_uni(c)), base_rng__),
          "assigning variable yconc_sim", index_uni(c));
        current_statement__ = 76;
        assign(log_lik_conc,
          lognormal_lpdf<false>(rvalue(yconc, "yconc", index_uni(c)),
            stan::math::log(
              rvalue(conc, "conc",
                index_uni(rvalue(experiment_yconc, "experiment_yconc",
                            index_uni(c))),
                  index_uni(rvalue(mic_ix_yconc, "mic_ix_yconc",
                              index_uni(c))))),
            rvalue(sigma_conc, "sigma_conc", index_uni(c))),
          "assigning variable log_lik_conc", index_uni(c));
      }
      current_statement__ = 82;
      for (int f = 1; f <= N_flux_measurement; ++f) {
        current_statement__ = 79;
        assign(yflux_sim,
          normal_rng(
            rvalue(flux, "flux",
              index_uni(rvalue(experiment_yflux, "experiment_yflux",
                          index_uni(f))),
                index_uni(rvalue(reaction_yflux, "reaction_yflux",
                            index_uni(f)))),
            rvalue(sigma_flux, "sigma_flux", index_uni(f)), base_rng__),
          "assigning variable yflux_sim", index_uni(f));
        current_statement__ = 80;
        assign(log_lik_flux,
          normal_lpdf<false>(rvalue(yflux, "yflux", index_uni(f)),
            rvalue(flux, "flux",
              index_uni(rvalue(experiment_yflux, "experiment_yflux",
                          index_uni(f))),
                index_uni(rvalue(reaction_yflux, "reaction_yflux",
                            index_uni(f)))),
            rvalue(sigma_flux, "sigma_flux", index_uni(f))),
          "assigning variable log_lik_flux", index_uni(f));
      }
      current_statement__ = 90;
      for (int e = 1; e <= N_experiment; ++e) {
        current_statement__ = 83;
        assign(keq,
          get_keq(S, dgf, rvalue(temperature, "temperature", index_uni(e)),
            mic_to_met, water_stoichiometry, transported_charge,
            rvalue(psi, "psi", index_uni(e)), pstream__),
          "assigning variable keq", index_uni(e));
        current_statement__ = 84;
        assign(free_enzyme_ratio,
          get_free_enzyme_ratio(rvalue(conc, "conc", index_uni(e)), S, km,
            ki, edge_type, km_lookup, ki_lookup, sub_by_edge_long,
            sub_by_edge_bounds, prod_by_edge_long, prod_by_edge_bounds,
            ci_by_edge_long, ci_by_edge_bounds, pstream__),
          "assigning variable free_enzyme_ratio", index_uni(e));
        current_statement__ = 85;
        assign(saturation,
          get_saturation(rvalue(conc, "conc", index_uni(e)), km,
            rvalue(free_enzyme_ratio, "free_enzyme_ratio", index_uni(e)),
            km_lookup, sub_by_edge_long, sub_by_edge_bounds,
            edge_type, pstream__),
          "assigning variable saturation", index_uni(e));
        current_statement__ = 86;
        assign(allostery,
          get_allostery(rvalue(conc, "conc", index_uni(e)),
            rvalue(free_enzyme_ratio, "free_enzyme_ratio", index_uni(e)),
            transfer_constant, diss_t, diss_r, subunits, dt_lookup,
            dr_lookup, edge_to_tc, ai_ix_long, ai_ix_bounds, aa_ix_long,
            aa_ix_bounds, pstream__),
          "assigning variable allostery", index_uni(e));
        current_statement__ = 87;
        assign(phosphorylation,
          get_phosphorylation(kcat_phos,
            elt_multiply(rvalue(conc_phos, "conc_phos", index_uni(e)),
              transpose(rvalue(phos_knockout, "phos_knockout", index_uni(e)))),
            pa_ix_long, pa_ix_bounds, pi_ix_long, pi_ix_bounds,
            subunits, pstream__),
          "assigning variable phosphorylation", index_uni(e));
        current_statement__ = 88;
        assign(reversibility,
          get_reversibility(rvalue(dgrs, "dgrs", index_uni(e)),
            rvalue(temperature, "temperature", index_uni(e)), S,
            rvalue(conc, "conc", index_uni(e)), edge_type, pstream__),
          "assigning variable reversibility", index_uni(e));
      }
      out__.write(yconc_sim);
      out__.write(yflux_sim);
      out__.write(log_lik_conc);
      out__.write(log_lik_flux);
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          out__.write(free_enzyme_ratio[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          out__.write(saturation[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          out__.write(allostery[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          out__.write(phosphorylation[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          out__.write(reversibility[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          out__.write(keq[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, 1> dgf;
      dgf = Eigen::Matrix<local_scalar_t__, -1, 1>(N_metabolite);
      stan::math::fill(dgf, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N_metabolite; ++sym1__) {
        assign(dgf, in__.read<local_scalar_t__>(),
          "assigning variable dgf", index_uni(sym1__));
      }
      out__.write(dgf);
      Eigen::Matrix<local_scalar_t__, -1, 1> log_kcat_z;
      log_kcat_z = Eigen::Matrix<local_scalar_t__, -1, 1>(N_enzyme);
      stan::math::fill(log_kcat_z, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
        assign(log_kcat_z, in__.read<local_scalar_t__>(),
          "assigning variable log_kcat_z", index_uni(sym1__));
      }
      out__.write(log_kcat_z);
      Eigen::Matrix<local_scalar_t__, -1, 1> log_km_z;
      log_km_z = Eigen::Matrix<local_scalar_t__, -1, 1>(N_km);
      stan::math::fill(log_km_z, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N_km; ++sym1__) {
        assign(log_km_z, in__.read<local_scalar_t__>(),
          "assigning variable log_km_z", index_uni(sym1__));
      }
      out__.write(log_km_z);
      Eigen::Matrix<local_scalar_t__, -1, 1> log_kcat_phos_z;
      log_kcat_phos_z = Eigen::Matrix<local_scalar_t__, -1, 1>(N_phosphorylation_enzymes);
      stan::math::fill(log_kcat_phos_z, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N_phosphorylation_enzymes; ++sym1__) {
        assign(log_kcat_phos_z, in__.read<local_scalar_t__>(),
          "assigning variable log_kcat_phos_z", index_uni(sym1__));
      }
      out__.write(log_kcat_phos_z);
      Eigen::Matrix<local_scalar_t__, -1, 1> log_ki_z;
      log_ki_z = Eigen::Matrix<local_scalar_t__, -1, 1>(N_ci);
      stan::math::fill(log_ki_z, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N_ci; ++sym1__) {
        assign(log_ki_z, in__.read<local_scalar_t__>(),
          "assigning variable log_ki_z", index_uni(sym1__));
      }
      out__.write(log_ki_z);
      Eigen::Matrix<local_scalar_t__, -1, 1> log_diss_t_z;
      log_diss_t_z = Eigen::Matrix<local_scalar_t__, -1, 1>(N_ai);
      stan::math::fill(log_diss_t_z, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N_ai; ++sym1__) {
        assign(log_diss_t_z, in__.read<local_scalar_t__>(),
          "assigning variable log_diss_t_z", index_uni(sym1__));
      }
      out__.write(log_diss_t_z);
      Eigen::Matrix<local_scalar_t__, -1, 1> log_diss_r_z;
      log_diss_r_z = Eigen::Matrix<local_scalar_t__, -1, 1>(N_aa);
      stan::math::fill(log_diss_r_z, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N_aa; ++sym1__) {
        assign(log_diss_r_z, in__.read<local_scalar_t__>(),
          "assigning variable log_diss_r_z", index_uni(sym1__));
      }
      out__.write(log_diss_r_z);
      Eigen::Matrix<local_scalar_t__, -1, 1> log_transfer_constant_z;
      log_transfer_constant_z = Eigen::Matrix<local_scalar_t__, -1, 1>(N_ae);
      stan::math::fill(log_transfer_constant_z, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N_ae; ++sym1__) {
        assign(log_transfer_constant_z, in__.read<local_scalar_t__>(),
          "assigning variable log_transfer_constant_z", index_uni(sym1__));
      }
      out__.write(log_transfer_constant_z);
      Eigen::Matrix<local_scalar_t__, -1, 1> psi_z;
      psi_z = Eigen::Matrix<local_scalar_t__, -1, 1>(N_experiment);
      stan::math::fill(psi_z, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        assign(psi_z, in__.read<local_scalar_t__>(),
          "assigning variable psi_z", index_uni(sym1__));
      }
      out__.write(psi_z);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> drain_z;
      drain_z = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N_experiment, Eigen::Matrix<local_scalar_t__, -1, 1>(N_drain));
      stan::math::fill(drain_z, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N_drain; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          assign(drain_z, in__.read<local_scalar_t__>(),
            "assigning variable drain_z", index_uni(sym2__),
                                            index_uni(sym1__));
        }
      }
      out__.write(drain_z);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> log_conc_enzyme_z;
      log_conc_enzyme_z = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N_experiment, Eigen::Matrix<local_scalar_t__, -1, 1>(N_enzyme));
      stan::math::fill(log_conc_enzyme_z, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          assign(log_conc_enzyme_z, in__.read<local_scalar_t__>(),
            "assigning variable log_conc_enzyme_z", index_uni(sym2__),
                                                      index_uni(sym1__));
        }
      }
      out__.write(log_conc_enzyme_z);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> log_conc_phos_z;
      log_conc_phos_z = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N_experiment, Eigen::Matrix<local_scalar_t__, -1, 1>(N_phosphorylation_enzymes));
      stan::math::fill(log_conc_phos_z, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N_phosphorylation_enzymes; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          assign(log_conc_phos_z, in__.read<local_scalar_t__>(),
            "assigning variable log_conc_phos_z", index_uni(sym2__),
                                                    index_uni(sym1__));
        }
      }
      out__.write(log_conc_phos_z);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> log_conc_unbalanced_z;
      log_conc_unbalanced_z = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N_experiment, Eigen::Matrix<local_scalar_t__, -1, 1>(N_unbalanced));
      stan::math::fill(log_conc_unbalanced_z, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          assign(log_conc_unbalanced_z, in__.read<local_scalar_t__>(),
            "assigning variable log_conc_unbalanced_z", index_uni(sym2__),
                                                          index_uni(sym1__));
        }
      }
      out__.write(log_conc_unbalanced_z);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"dgf", "log_kcat_z", "log_km_z",
      "log_kcat_phos_z", "log_ki_z", "log_diss_t_z", "log_diss_r_z",
      "log_transfer_constant_z", "psi_z", "drain_z", "log_conc_enzyme_z",
      "log_conc_phos_z", "log_conc_unbalanced_z", "km", "ki", "kcat",
      "diss_t", "diss_r", "transfer_constant", "kcat_phos", "psi", "drain",
      "conc_enzyme", "conc_unbalanced", "conc_phos", "conc", "flux", "dgrs",
      "yconc_sim", "yflux_sim", "log_lik_conc", "log_lik_flux",
      "free_enzyme_ratio", "saturation", "allostery", "phosphorylation",
      "reversibility", "keq"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(N_metabolite)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(N_enzyme)},
      std::vector<size_t>{static_cast<size_t>(N_km)},
      std::vector<size_t>{static_cast<size_t>(N_phosphorylation_enzymes)},
      std::vector<size_t>{static_cast<size_t>(N_ci)},
      std::vector<size_t>{static_cast<size_t>(N_ai)},
      std::vector<size_t>{static_cast<size_t>(N_aa)},
      std::vector<size_t>{static_cast<size_t>(N_ae)},
      std::vector<size_t>{static_cast<size_t>(N_experiment)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_drain)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_enzyme)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_phosphorylation_enzymes)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_unbalanced)},
      std::vector<size_t>{static_cast<size_t>(N_km)},
      std::vector<size_t>{static_cast<size_t>(N_ci)},
      std::vector<size_t>{static_cast<size_t>(N_enzyme)},
      std::vector<size_t>{static_cast<size_t>(N_ai)},
      std::vector<size_t>{static_cast<size_t>(N_aa)},
      std::vector<size_t>{static_cast<size_t>(N_ae)},
      std::vector<size_t>{static_cast<size_t>(N_phosphorylation_enzymes)},
      std::vector<size_t>{static_cast<size_t>(N_experiment)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_drain)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_enzyme)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_unbalanced)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_phosphorylation_enzymes)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_mic)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_reaction)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_edge)},
      std::vector<size_t>{static_cast<size_t>(N_conc_measurement)},
      std::vector<size_t>{static_cast<size_t>(N_flux_measurement)},
      std::vector<size_t>{static_cast<size_t>(N_conc_measurement)},
      std::vector<size_t>{static_cast<size_t>(N_flux_measurement)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_edge)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_edge)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_edge)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_edge)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_edge)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_edge)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N_metabolite; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "dgf" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "log_kcat_z" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_km; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "log_km_z" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_phosphorylation_enzymes; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "log_kcat_phos_z" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_ci; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "log_ki_z" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_ai; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "log_diss_t_z" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_aa; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "log_diss_r_z" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_ae; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "log_transfer_constant_z" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "psi_z" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_drain; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "drain_z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "log_conc_enzyme_z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_phosphorylation_enzymes; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "log_conc_phos_z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "log_conc_unbalanced_z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_km; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "km" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_ci; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "kcat" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_ai; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "diss_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_aa; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "diss_r" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_ae; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "transfer_constant" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_phosphorylation_enzymes; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "kcat_phos" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "psi" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_drain; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "drain" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "conc_enzyme" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "conc_unbalanced" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_phosphorylation_enzymes; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "conc_phos" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "conc" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_reaction; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "flux" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "dgrs" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_conc_measurement; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yconc_sim" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_flux_measurement; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yflux_sim" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_conc_measurement; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_conc" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_flux_measurement; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_flux" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "free_enzyme_ratio" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "saturation" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "allostery" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "phosphorylation" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "reversibility" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "keq" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N_metabolite; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "dgf" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "log_kcat_z" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_km; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "log_km_z" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_phosphorylation_enzymes; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "log_kcat_phos_z" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_ci; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "log_ki_z" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_ai; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "log_diss_t_z" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_aa; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "log_diss_r_z" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_ae; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "log_transfer_constant_z" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "psi_z" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_drain; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "drain_z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "log_conc_enzyme_z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_phosphorylation_enzymes; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "log_conc_phos_z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "log_conc_unbalanced_z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_km; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "km" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_ci; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ki" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "kcat" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_ai; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "diss_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_aa; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "diss_r" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_ae; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "transfer_constant" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_phosphorylation_enzymes; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "kcat_phos" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_experiment; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "psi" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_drain; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "drain" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "conc_enzyme" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "conc_unbalanced" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_phosphorylation_enzymes; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "conc_phos" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "conc" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_reaction; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "flux" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "dgrs" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_conc_measurement; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yconc_sim" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_flux_measurement; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yflux_sim" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_conc_measurement; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_conc" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_flux_measurement; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik_flux" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "free_enzyme_ratio" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "saturation" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "allostery" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "phosphorylation" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "reversibility" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "keq" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"dgf\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_metabolite) + "},\"block\":\"parameters\"},{\"name\":\"log_kcat_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_enzyme) + "},\"block\":\"parameters\"},{\"name\":\"log_km_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_km) + "},\"block\":\"parameters\"},{\"name\":\"log_kcat_phos_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_phosphorylation_enzymes) + "},\"block\":\"parameters\"},{\"name\":\"log_ki_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_ci) + "},\"block\":\"parameters\"},{\"name\":\"log_diss_t_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_ai) + "},\"block\":\"parameters\"},{\"name\":\"log_diss_r_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_aa) + "},\"block\":\"parameters\"},{\"name\":\"log_transfer_constant_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_ae) + "},\"block\":\"parameters\"},{\"name\":\"psi_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_experiment) + "},\"block\":\"parameters\"},{\"name\":\"drain_z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_drain) + "}},\"block\":\"parameters\"},{\"name\":\"log_conc_enzyme_z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_enzyme) + "}},\"block\":\"parameters\"},{\"name\":\"log_conc_phos_z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_phosphorylation_enzymes) + "}},\"block\":\"parameters\"},{\"name\":\"log_conc_unbalanced_z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_unbalanced) + "}},\"block\":\"parameters\"},{\"name\":\"km\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_km) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ki\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_ci) + "},\"block\":\"transformed_parameters\"},{\"name\":\"kcat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_enzyme) + "},\"block\":\"transformed_parameters\"},{\"name\":\"diss_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_ai) + "},\"block\":\"transformed_parameters\"},{\"name\":\"diss_r\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_aa) + "},\"block\":\"transformed_parameters\"},{\"name\":\"transfer_constant\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_ae) + "},\"block\":\"transformed_parameters\"},{\"name\":\"kcat_phos\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_phosphorylation_enzymes) + "},\"block\":\"transformed_parameters\"},{\"name\":\"psi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_experiment) + "},\"block\":\"transformed_parameters\"},{\"name\":\"drain\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_drain) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"conc_enzyme\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_enzyme) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"conc_unbalanced\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_unbalanced) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"conc_phos\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_phosphorylation_enzymes) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"conc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_mic) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"flux\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_reaction) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"dgrs\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"yconc_sim\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_conc_measurement) + "},\"block\":\"generated_quantities\"},{\"name\":\"yflux_sim\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_flux_measurement) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_conc\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_conc_measurement) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_flux\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_flux_measurement) + "},\"block\":\"generated_quantities\"},{\"name\":\"free_enzyme_ratio\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"saturation\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"allostery\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"phosphorylation\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"reversibility\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"keq\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"dgf\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_metabolite) + "},\"block\":\"parameters\"},{\"name\":\"log_kcat_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_enzyme) + "},\"block\":\"parameters\"},{\"name\":\"log_km_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_km) + "},\"block\":\"parameters\"},{\"name\":\"log_kcat_phos_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_phosphorylation_enzymes) + "},\"block\":\"parameters\"},{\"name\":\"log_ki_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_ci) + "},\"block\":\"parameters\"},{\"name\":\"log_diss_t_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_ai) + "},\"block\":\"parameters\"},{\"name\":\"log_diss_r_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_aa) + "},\"block\":\"parameters\"},{\"name\":\"log_transfer_constant_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_ae) + "},\"block\":\"parameters\"},{\"name\":\"psi_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_experiment) + "},\"block\":\"parameters\"},{\"name\":\"drain_z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_drain) + "}},\"block\":\"parameters\"},{\"name\":\"log_conc_enzyme_z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_enzyme) + "}},\"block\":\"parameters\"},{\"name\":\"log_conc_phos_z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_phosphorylation_enzymes) + "}},\"block\":\"parameters\"},{\"name\":\"log_conc_unbalanced_z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_unbalanced) + "}},\"block\":\"parameters\"},{\"name\":\"km\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_km) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ki\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_ci) + "},\"block\":\"transformed_parameters\"},{\"name\":\"kcat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_enzyme) + "},\"block\":\"transformed_parameters\"},{\"name\":\"diss_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_ai) + "},\"block\":\"transformed_parameters\"},{\"name\":\"diss_r\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_aa) + "},\"block\":\"transformed_parameters\"},{\"name\":\"transfer_constant\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_ae) + "},\"block\":\"transformed_parameters\"},{\"name\":\"kcat_phos\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_phosphorylation_enzymes) + "},\"block\":\"transformed_parameters\"},{\"name\":\"psi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_experiment) + "},\"block\":\"transformed_parameters\"},{\"name\":\"drain\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_drain) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"conc_enzyme\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_enzyme) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"conc_unbalanced\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_unbalanced) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"conc_phos\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_phosphorylation_enzymes) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"conc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_mic) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"flux\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_reaction) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"dgrs\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"yconc_sim\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_conc_measurement) + "},\"block\":\"generated_quantities\"},{\"name\":\"yflux_sim\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_flux_measurement) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_conc\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_conc_measurement) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_flux\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_flux_measurement) + "},\"block\":\"generated_quantities\"},{\"name\":\"free_enzyme_ratio\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"saturation\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"allostery\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"phosphorylation\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"reversibility\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"keq\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((N_metabolite + N_enzyme) + N_km) + N_phosphorylation_enzymes) +
            N_ci) + N_ai) + N_aa) + N_ae) + N_experiment) +
       (N_experiment * N_drain)) + (N_experiment * N_enzyme)) +
     (N_experiment * N_phosphorylation_enzymes)) +
    (N_experiment * N_unbalanced));
      const size_t num_transformed = 
  ((((((((((((((N_km + N_ci) + N_enzyme) + N_ai) + N_aa) + N_ae) +
            N_phosphorylation_enzymes) + N_experiment) +
          (N_experiment * N_drain)) + (N_experiment * N_enzyme)) +
        (N_experiment * N_unbalanced)) +
       (N_experiment * N_phosphorylation_enzymes)) + (N_experiment * N_mic))
     + (N_experiment * N_reaction)) + (N_experiment * N_edge));
      const size_t num_gen_quantities = 
  (((((((((N_conc_measurement + N_flux_measurement) + N_conc_measurement) +
          N_flux_measurement) + (N_experiment * N_edge)) +
        (N_experiment * N_edge)) + (N_experiment * N_edge)) +
      (N_experiment * N_edge)) + (N_experiment * N_edge)) +
    (N_experiment * N_edge));
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((N_metabolite + N_enzyme) + N_km) + N_phosphorylation_enzymes) +
            N_ci) + N_ai) + N_aa) + N_ae) + N_experiment) +
       (N_experiment * N_drain)) + (N_experiment * N_enzyme)) +
     (N_experiment * N_phosphorylation_enzymes)) +
    (N_experiment * N_unbalanced));
      const size_t num_transformed = 
  ((((((((((((((N_km + N_ci) + N_enzyme) + N_ai) + N_aa) + N_ae) +
            N_phosphorylation_enzymes) + N_experiment) +
          (N_experiment * N_drain)) + (N_experiment * N_enzyme)) +
        (N_experiment * N_unbalanced)) +
       (N_experiment * N_phosphorylation_enzymes)) + (N_experiment * N_mic))
     + (N_experiment * N_reaction)) + (N_experiment * N_edge));
      const size_t num_gen_quantities = 
  (((((((((N_conc_measurement + N_flux_measurement) + N_conc_measurement) +
          N_flux_measurement) + (N_experiment * N_edge)) +
        (N_experiment * N_edge)) + (N_experiment * N_edge)) +
      (N_experiment * N_edge)) + (N_experiment * N_edge)) +
    (N_experiment * N_edge));
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 13> names__{"dgf", "log_kcat_z",
      "log_km_z", "log_kcat_phos_z", "log_ki_z", "log_diss_t_z",
      "log_diss_r_z", "log_transfer_constant_z", "psi_z", "drain_z",
      "log_conc_enzyme_z", "log_conc_phos_z", "log_conc_unbalanced_z"};
      const std::array<Eigen::Index, 13> constrain_param_sizes__{N_metabolite
       , N_enzyme, N_km, N_phosphorylation_enzymes, N_ci, N_ai, N_aa, 
       N_ae, N_experiment, (N_experiment * N_drain),
       (N_experiment * N_enzyme), (N_experiment * N_phosphorylation_enzymes),
       (N_experiment * N_unbalanced)};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = model_model_namespace::model_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return model_model_namespace::profiles__;
}

#endif


